/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  MetaTransactionsFacet,
  MetaTransactionsFacetInterface,
} from "../../../../../../src/contracts/ghst-staking/contracts/facets/MetaTransactionsFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "relayerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    name: "setDomainSeparator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a74806100206000396000f3fe6080604052600436106100345760003560e01c80630c53c51c146100395780632d0335ab146101725780639c885c07146101b7575b600080fd5b6100fd600480360360a081101561004f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007a57600080fd5b82018360208201111561008c57600080fd5b803590602001918460018302840111640100000000831117156100ae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff166102f3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013757818101518382015260200161011f565b50505050905090810190601f1680156101645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017e57600080fd5b506101a56004803603602081101561019557600080fd5b50356001600160a01b0316610624565b60408051918252519081900360200190f35b3480156101c357600080fd5b506102f1600480360360408110156101da57600080fd5b8101906020810181356401000000008111156101f557600080fd5b82018360208201111561020757600080fd5b8035906020019184600183028401116401000000008311171561022957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561027c57600080fd5b82018360208201111561028e57600080fd5b803590602001918460018302840111640100000000831117156102b057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061063f945050505050565b005b60606000610300866106c7565b90506000356001600160e01b031990811690821614156103515760405162461bcd60e51b815260040180806020018281038252603d815260200180610992603d913960400191505060405180910390fd5b6001600160a01b0387166000818152600b60209081526040918290205482516060810184528181529182019390935290810188905261039389828989896106e7565b6103ce5760405162461bcd60e51b81526004018080602001828103825260218152602001806109cf6021913960400191505060405180910390fd5b6001600160a01b0389166000908152600b60209081526040808320600186019055518a51839230928d928f92918201918291908501908083835b602083106104275780518252601f199092019160209182019101610408565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b6020831061049d5780518252601f19909201916020918201910161047e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146104ff576040519150601f19603f3d011682016040523d82523d6000602084013e610504565b606091505b50915091508161055b576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8b338c60405180846001600160a01b03168152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105da5781810151838201526020016105c2565b50505050905090810190601f1680156106075780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a19a9950505050505050505050565b6001600160a01b03166000908152600b602052604090205490565b6106476107d1565b6040518060800160405280604f81526020016109f0604f9139805190602001208280519060200120828051906020012061067f61080f565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c090920190528051910120600a555050565b60008151600014156106db575060006106e2565b5060208101515b919050565b60008060016106fd6106f888610813565b610896565b84878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610754573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107b0576040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b866001600160a01b0316816001600160a01b03161491505095945050505050565b6107d96108e2565b600401546001600160a01b0316331461080d5760405162461bcd60e51b81526004016108049061090c565b60405180910390fd5b565b4690565b600060405180608001604052806043815260200161094f60439139805190602001208260000151836020015184604001518051906020012060405160200180858152602001848152602001836001600160a01b03168152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b60006108a0610906565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b600a5490565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b60608201526080019056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e61747572652966756e6374696f6e5369676e61747572652063616e206e6f74206265206f6620657865637574654d6574615472616e73616374696f6e206d6574686f645369676e657220616e64207369676e617475726520646f206e6f74206d61746368454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e743235362073616c742c6164647265737320766572696679696e67436f6e747261637429a2646970667358221220eb9b2c1cdf03d3883f8f5f44d7840297438c2f566050aa2ce83898a65895e7a064736f6c63430007060033";

type MetaTransactionsFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaTransactionsFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaTransactionsFacet__factory extends ContractFactory {
  constructor(...args: MetaTransactionsFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MetaTransactionsFacet> {
    return super.deploy(overrides || {}) as Promise<MetaTransactionsFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaTransactionsFacet {
    return super.attach(address) as MetaTransactionsFacet;
  }
  override connect(signer: Signer): MetaTransactionsFacet__factory {
    return super.connect(signer) as MetaTransactionsFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaTransactionsFacetInterface {
    return new utils.Interface(_abi) as MetaTransactionsFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaTransactionsFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MetaTransactionsFacet;
  }
}
