/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  LibInstallation,
  LibInstallationInterface,
} from "../../../../../../src/contracts/aavegotchi-realm/contracts/libraries/LibInstallation";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_coordinateX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_coordinateY",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_newInstallationId",
        type: "uint256",
      },
    ],
    name: "UpgradeFinalized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_coordinateX",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_coordinateY",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockInitiated",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "readyBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "installationId",
        type: "uint256",
      },
    ],
    name: "UpgradeInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_queueIndex",
        type: "uint256",
      },
    ],
    name: "UpgradeQueueFinalized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_queueIndex",
        type: "uint256",
      },
    ],
    name: "UpgradeQueued",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e1344e30956429648cc2b3303da7a91d0b599d4e5778579fc5a6d159d78f364664736f6c63430008090033";

type LibInstallationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibInstallationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibInstallation__factory extends ContractFactory {
  constructor(...args: LibInstallationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibInstallation> {
    return super.deploy(overrides || {}) as Promise<LibInstallation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibInstallation {
    return super.attach(address) as LibInstallation;
  }
  override connect(signer: Signer): LibInstallation__factory {
    return super.connect(signer) as LibInstallation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibInstallationInterface {
    return new utils.Interface(_abi) as LibInstallationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibInstallation {
    return new Contract(address, _abi, signerOrProvider) as LibInstallation;
  }
}
