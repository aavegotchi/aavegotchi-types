/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../../common";
import type {
  TestTileFacet,
  TestTileFacetInterface,
} from "../../../../../../../../src/contracts/aavegotchi-realm/contracts/TileDiamond/facets/test/TestTileFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16[]",
        name: "_tileTypes",
        type: "uint16[]",
      },
    ],
    name: "testCraftTiles",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610527806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632fc47a3414610030575b600080fd5b61004361003e3660046103f2565b610045565b005b60005b8181101561009a576100883384848481811061006657610066610467565b905060200201602081019061007b919061047d565b61ffff166001600061009f565b80610092816104be565b915050610048565b505050565b6000808160070185815481106100b7576100b7610467565b600091825260209091206006909102015465010000000000900463ffffffff161115610243578060080182815481106100f2576100f2610467565b906000526020600020906002020160010160079054906101000a900460ff161561016e5760405162461bcd60e51b815260206004820152602260248201527f4c6962455243313135353a20746f6b656e496420616c7265616479206d696e74604482015261195960f21b60648201526084015b60405180910390fd5b846001600160a01b031681600801838154811061018d5761018d610467565b60009182526020909120600290910201600101546801000000000000000090046001600160a01b0316146102035760405162461bcd60e51b815260206004820152601760248201527f4c6962455243313135353a2077726f6e67206f776e65720000000000000000006044820152606401610165565b600181600801838154811061021a5761021a610467565b906000526020600020906002020160010160076101000a81548160ff0219169083151502179055505b61025285858561ffff16610340565b8261ffff16600114156102a85783856001600160a01b03167f51657e5528e26561636ff2e150a205acc5869437fe7f681f906a95887e3f0eac8460405161029b91815260200190565b60405180910390a36102ed565b60405161ffff8416815284906001600160a01b038716907fcf4ec29a21df4a833e09008384c100f3bde71017c3868dd3b89e2d4b86dc5ffc9060200160405180910390a35b6040805185815261ffff851660208201526001600160a01b0387169160009130917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0383166000908152600e602090815260408083208584529091528120805483919083906103759084906104d9565b90915550506001600160a01b038416600090815260108201602090815260408083208684529091529020546103ec576001600160a01b0384166000818152600f8301602090815260408083208054600181018255818552838520018890559383529254601085018252838320878452909152919020555b50505050565b6000806020838503121561040557600080fd5b823567ffffffffffffffff8082111561041d57600080fd5b818501915085601f83011261043157600080fd5b81358181111561044057600080fd5b8660208260051b850101111561045557600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561048f57600080fd5b813561ffff811681146104a157600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156104d2576104d26104a8565b5060010190565b600082198211156104ec576104ec6104a8565b50019056fea264697066735822122018b1cb5b07ee4ce99c90367ff400cf8f00bd1be9922ba67307ea6c5aba5ebdc964736f6c63430008090033";

type TestTileFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTileFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTileFacet__factory extends ContractFactory {
  constructor(...args: TestTileFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestTileFacet> {
    return super.deploy(overrides || {}) as Promise<TestTileFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTileFacet {
    return super.attach(address) as TestTileFacet;
  }
  override connect(signer: Signer): TestTileFacet__factory {
    return super.connect(signer) as TestTileFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTileFacetInterface {
    return new utils.Interface(_abi) as TestTileFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTileFacet {
    return new Contract(address, _abi, signerOrProvider) as TestTileFacet;
  }
}
