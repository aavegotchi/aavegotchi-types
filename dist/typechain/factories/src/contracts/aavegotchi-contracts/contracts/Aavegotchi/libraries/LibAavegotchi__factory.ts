/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../common";
import type {
  LibAavegotchi,
  LibAavegotchiInterface,
} from "../../../../../../../src/contracts/aavegotchi-contracts/contracts/Aavegotchi/libraries/LibAavegotchi";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kinship",
        type: "uint256",
      },
    ],
    name: "AavegotchiInteract",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e58deee662e3fad51e9fab8d603eefd7143c1371a1e57c7c916f696526d79ebf64736f6c63430008010033";

type LibAavegotchiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibAavegotchiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibAavegotchi__factory extends ContractFactory {
  constructor(...args: LibAavegotchiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibAavegotchi> {
    return super.deploy(overrides || {}) as Promise<LibAavegotchi>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibAavegotchi {
    return super.attach(address) as LibAavegotchi;
  }
  override connect(signer: Signer): LibAavegotchi__factory {
    return super.connect(signer) as LibAavegotchi__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibAavegotchiInterface {
    return new utils.Interface(_abi) as LibAavegotchiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAavegotchi {
    return new Contract(address, _abi, signerOrProvider) as LibAavegotchi;
  }
}
