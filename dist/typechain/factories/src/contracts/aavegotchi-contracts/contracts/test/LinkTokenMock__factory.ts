/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  LinkTokenMock,
  LinkTokenMockInterface,
} from "../../../../../../src/contracts/aavegotchi-contracts/contracts/test/LinkTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balanceOf_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId_",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "transferAndCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610324806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063077001b9146100465780634000aea01461006457806370a0823114610084575b600080fd5b61004e610097565b60405161005b9190610279565b60405180910390f35b6100776100723660046101bd565b610123565b60405161005b919061026e565b61004e61009236600461019c565b610173565b6000805460018054600254838552600360205260408520548594936001600160a01b03909216916100c7916102a6565b6040516020016100da9493929190610282565b60405160208183030381529060405280519060200120905060005481604051602001610107929190610260565b6040516020818303038152906040528051906020012091505090565b60006101318284018461023f565b6001556000818155600280546001600160a01b03191633179055908152600360205260408120805491610163836102bd565b9091555060019695505050505050565b50674563918244f4000090565b80356001600160a01b038116811461019757600080fd5b919050565b6000602082840312156101ad578081fd5b6101b682610180565b9392505050565b600080600080606085870312156101d2578283fd5b6101db85610180565b935060208501359250604085013567ffffffffffffffff808211156101fe578384fd5b818701915087601f830112610211578384fd5b81358181111561021f578485fd5b886020828501011115610230578485fd5b95989497505060200194505050565b60008060408385031215610251578182fd5b50508035926020909101359150565b918252602082015260400190565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6000828210156102b8576102b86102d8565b500390565b60006000198214156102d1576102d16102d8565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203d8838fcf929b4c98c0e9547115aa1a168aeaa6483dc55c217162f0deb2c108c64736f6c63430008010033";

type LinkTokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LinkTokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LinkTokenMock__factory extends ContractFactory {
  constructor(...args: LinkTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LinkTokenMock> {
    return super.deploy(overrides || {}) as Promise<LinkTokenMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LinkTokenMock {
    return super.attach(address) as LinkTokenMock;
  }
  override connect(signer: Signer): LinkTokenMock__factory {
    return super.connect(signer) as LinkTokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinkTokenMockInterface {
    return new utils.Interface(_abi) as LinkTokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LinkTokenMock {
    return new Contract(address, _abi, signerOrProvider) as LinkTokenMock;
  }
}
