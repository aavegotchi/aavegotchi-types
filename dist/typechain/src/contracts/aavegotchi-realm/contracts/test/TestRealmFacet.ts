/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace TestRealmFacet {
  export type BatchEquipIOStruct = {
    types: PromiseOrValue<BigNumberish>[];
    equip: PromiseOrValue<boolean>[];
    ids: PromiseOrValue<BigNumberish>[];
    x: PromiseOrValue<BigNumberish>[];
    y: PromiseOrValue<BigNumberish>[];
  };

  export type BatchEquipIOStructOutput = [
    BigNumber[],
    boolean[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    types: BigNumber[];
    equip: boolean[];
    ids: BigNumber[];
    x: BigNumber[];
    y: BigNumber[];
  };

  export type MintParcelInputStruct = {
    coordinateX: PromiseOrValue<BigNumberish>;
    coordinateY: PromiseOrValue<BigNumberish>;
    district: PromiseOrValue<BigNumberish>;
    parcelId: PromiseOrValue<string>;
    parcelAddress: PromiseOrValue<string>;
    size: PromiseOrValue<BigNumberish>;
    boost: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type MintParcelInputStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber]
  ] & {
    coordinateX: BigNumber;
    coordinateY: BigNumber;
    district: BigNumber;
    parcelId: string;
    parcelAddress: string;
    size: BigNumber;
    boost: [BigNumber, BigNumber, BigNumber, BigNumber];
  };
}

export interface TestRealmFacetInterface extends utils.Interface {
  functions: {
    "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))": FunctionFragment;
    "mockClaimAvailableAlchemica(uint256,uint256)": FunctionFragment;
    "mockEquipInstallation(uint256,uint256,uint256,uint256)": FunctionFragment;
    "mockEquipTile(uint256,uint256,uint256,uint256)": FunctionFragment;
    "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])": FunctionFragment;
    "mockRawFulfillRandomWords(uint256,uint256,uint256)": FunctionFragment;
    "mockStartSurveying(uint256)": FunctionFragment;
    "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "mockUnequipTile(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mockBatchEquip"
      | "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"
      | "mockClaimAvailableAlchemica"
      | "mockClaimAvailableAlchemica(uint256,uint256)"
      | "mockEquipInstallation"
      | "mockEquipInstallation(uint256,uint256,uint256,uint256)"
      | "mockEquipTile"
      | "mockEquipTile(uint256,uint256,uint256,uint256)"
      | "mockMintParcels"
      | "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"
      | "mockRawFulfillRandomWords"
      | "mockRawFulfillRandomWords(uint256,uint256,uint256)"
      | "mockStartSurveying"
      | "mockStartSurveying(uint256)"
      | "mockUnequipInstallation"
      | "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"
      | "mockUnequipTile"
      | "mockUnequipTile(uint256,uint256,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mockBatchEquip",
    values: [PromiseOrValue<BigNumberish>, TestRealmFacet.BatchEquipIOStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))",
    values: [PromiseOrValue<BigNumberish>, TestRealmFacet.BatchEquipIOStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockClaimAvailableAlchemica",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockClaimAvailableAlchemica(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockEquipInstallation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockEquipInstallation(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockEquipTile",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockEquipTile(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockMintParcels",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      TestRealmFacet.MintParcelInputStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      TestRealmFacet.MintParcelInputStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockRawFulfillRandomWords",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockRawFulfillRandomWords(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockStartSurveying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockStartSurveying(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockUnequipInstallation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockUnequipTile",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockUnequipTile(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "mockBatchEquip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockClaimAvailableAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockClaimAvailableAlchemica(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockEquipInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockEquipInstallation(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockEquipTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockEquipTile(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockMintParcels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockRawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockRawFulfillRandomWords(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockStartSurveying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockStartSurveying(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockUnequipInstallation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockUnequipTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockUnequipTile(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "MockEquipInstallation(uint256,uint256,uint256,uint256)": EventFragment;
    "MockEquipTile(uint256,uint256,uint256,uint256)": EventFragment;
    "MockUnequipInstallation(uint256,uint256,uint256,uint256)": EventFragment;
    "MockUnequipTile(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockEquipInstallation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MockEquipInstallation(uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockEquipTile"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MockEquipTile(uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockUnequipInstallation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MockUnequipInstallation(uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockUnequipTile"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MockUnequipTile(uint256,uint256,uint256,uint256)"
  ): EventFragment;
}

export interface MockEquipInstallationEventObject {
  _realmId: BigNumber;
  _installationId: BigNumber;
  _x: BigNumber;
  _y: BigNumber;
}
export type MockEquipInstallationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MockEquipInstallationEventObject
>;

export type MockEquipInstallationEventFilter =
  TypedEventFilter<MockEquipInstallationEvent>;

export interface MockEquipTileEventObject {
  _realmId: BigNumber;
  _tileId: BigNumber;
  _x: BigNumber;
  _y: BigNumber;
}
export type MockEquipTileEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MockEquipTileEventObject
>;

export type MockEquipTileEventFilter = TypedEventFilter<MockEquipTileEvent>;

export interface MockUnequipInstallationEventObject {
  _realmId: BigNumber;
  _installationId: BigNumber;
  _x: BigNumber;
  _y: BigNumber;
}
export type MockUnequipInstallationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MockUnequipInstallationEventObject
>;

export type MockUnequipInstallationEventFilter =
  TypedEventFilter<MockUnequipInstallationEvent>;

export interface MockUnequipTileEventObject {
  _realmId: BigNumber;
  _tileId: BigNumber;
  _x: BigNumber;
  _y: BigNumber;
}
export type MockUnequipTileEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MockUnequipTileEventObject
>;

export type MockUnequipTileEventFilter = TypedEventFilter<MockUnequipTileEvent>;

export interface TestRealmFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestRealmFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mockBatchEquip(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockClaimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockClaimAvailableAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockEquipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockEquipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockEquipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockEquipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockMintParcels(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockRawFulfillRandomWords(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockRawFulfillRandomWords(uint256,uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockStartSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockStartSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockUnequipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockUnequipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mockUnequipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  mockBatchEquip(
    _realmId: PromiseOrValue<BigNumberish>,
    _params: TestRealmFacet.BatchEquipIOStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"(
    _realmId: PromiseOrValue<BigNumberish>,
    _params: TestRealmFacet.BatchEquipIOStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockClaimAvailableAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockClaimAvailableAlchemica(uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockEquipInstallation(
    _realmId: PromiseOrValue<BigNumberish>,
    _installationId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockEquipInstallation(uint256,uint256,uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _installationId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockEquipTile(
    _realmId: PromiseOrValue<BigNumberish>,
    _tileId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockEquipTile(uint256,uint256,uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _tileId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockMintParcels(
    _to: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _metadata: TestRealmFacet.MintParcelInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"(
    _to: PromiseOrValue<string>[],
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _metadata: TestRealmFacet.MintParcelInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockRawFulfillRandomWords(
    tokenId: PromiseOrValue<BigNumberish>,
    surveyingRound: PromiseOrValue<BigNumberish>,
    seed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockRawFulfillRandomWords(uint256,uint256,uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    surveyingRound: PromiseOrValue<BigNumberish>,
    seed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockStartSurveying(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockStartSurveying(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockUnequipInstallation(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _installationId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _installationId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockUnequipTile(
    _realmId: PromiseOrValue<BigNumberish>,
    _tileId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mockUnequipTile(uint256,uint256,uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _tileId: PromiseOrValue<BigNumberish>,
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mockBatchEquip(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mockClaimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockClaimAvailableAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockEquipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockEquipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockEquipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockEquipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockMintParcels(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mockRawFulfillRandomWords(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockRawFulfillRandomWords(uint256,uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockStartSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockStartSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockUnequipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockUnequipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockUnequipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MockEquipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId?: null,
      _installationId?: null,
      _x?: null,
      _y?: null
    ): MockEquipInstallationEventFilter;
    MockEquipInstallation(
      _realmId?: null,
      _installationId?: null,
      _x?: null,
      _y?: null
    ): MockEquipInstallationEventFilter;

    "MockEquipTile(uint256,uint256,uint256,uint256)"(
      _realmId?: null,
      _tileId?: null,
      _x?: null,
      _y?: null
    ): MockEquipTileEventFilter;
    MockEquipTile(
      _realmId?: null,
      _tileId?: null,
      _x?: null,
      _y?: null
    ): MockEquipTileEventFilter;

    "MockUnequipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId?: null,
      _installationId?: null,
      _x?: null,
      _y?: null
    ): MockUnequipInstallationEventFilter;
    MockUnequipInstallation(
      _realmId?: null,
      _installationId?: null,
      _x?: null,
      _y?: null
    ): MockUnequipInstallationEventFilter;

    "MockUnequipTile(uint256,uint256,uint256,uint256)"(
      _realmId?: null,
      _tileId?: null,
      _x?: null,
      _y?: null
    ): MockUnequipTileEventFilter;
    MockUnequipTile(
      _realmId?: null,
      _tileId?: null,
      _x?: null,
      _y?: null
    ): MockUnequipTileEventFilter;
  };

  estimateGas: {
    mockBatchEquip(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockClaimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockClaimAvailableAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockEquipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockEquipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockEquipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockEquipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockMintParcels(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockRawFulfillRandomWords(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockRawFulfillRandomWords(uint256,uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockStartSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockStartSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockUnequipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockUnequipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mockUnequipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mockBatchEquip(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockBatchEquip(uint256,(uint256[],bool[],uint256[],uint256[],uint256[]))"(
      _realmId: PromiseOrValue<BigNumberish>,
      _params: TestRealmFacet.BatchEquipIOStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockClaimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockClaimAvailableAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockEquipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockEquipInstallation(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockEquipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockEquipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockMintParcels(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockMintParcels(address[],uint256[],(uint256,uint256,uint256,string,string,uint256,uint256[4])[])"(
      _to: PromiseOrValue<string>[],
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _metadata: TestRealmFacet.MintParcelInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockRawFulfillRandomWords(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockRawFulfillRandomWords(uint256,uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      surveyingRound: PromiseOrValue<BigNumberish>,
      seed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockStartSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockStartSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockUnequipInstallation(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockUnequipInstallation(uint256,uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _installationId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockUnequipTile(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mockUnequipTile(uint256,uint256,uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _tileId: PromiseOrValue<BigNumberish>,
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
