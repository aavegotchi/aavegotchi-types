/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface AlchemicaFacetInterface extends utils.Interface {
  functions: {
    "batchTransferAlchemica(address[],uint256[4][])": FunctionFragment;
    "batchTransferTokens(address[][],uint256[][],address[])": FunctionFragment;
    "batchTransferTokensToGotchis(uint256[],address[],uint256[][])": FunctionFragment;
    "channelAlchemica(uint256,uint256,uint256,bytes)": FunctionFragment;
    "claimAvailableAlchemica(uint256,uint256,bytes)": FunctionFragment;
    "getAlchemicaAddresses()": FunctionFragment;
    "getAvailableAlchemica(uint256)": FunctionFragment;
    "getCapacities(uint256)": FunctionFragment;
    "getHarvestRates(uint256)": FunctionFragment;
    "getLastChanneled(uint256)": FunctionFragment;
    "getParcelLastChanneled(uint256)": FunctionFragment;
    "getRealmAlchemica(uint256)": FunctionFragment;
    "getRoundAlchemica(uint256,uint256)": FunctionFragment;
    "getRoundBaseAlchemica(uint256,uint256)": FunctionFragment;
    "getTotalAlchemicas()": FunctionFragment;
    "getTotalClaimed(uint256)": FunctionFragment;
    "isSurveying(uint256)": FunctionFragment;
    "lastClaimedAlchemica(uint256)": FunctionFragment;
    "progressSurveyingRound()": FunctionFragment;
    "setChannelingLimits(uint256[],uint256[])": FunctionFragment;
    "setTotalAlchemicas(uint256[4][5])": FunctionFragment;
    "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)": FunctionFragment;
    "startSurveying(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchTransferAlchemica"
      | "batchTransferAlchemica(address[],uint256[4][])"
      | "batchTransferTokens"
      | "batchTransferTokens(address[][],uint256[][],address[])"
      | "batchTransferTokensToGotchis"
      | "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"
      | "channelAlchemica"
      | "channelAlchemica(uint256,uint256,uint256,bytes)"
      | "claimAvailableAlchemica"
      | "claimAvailableAlchemica(uint256,uint256,bytes)"
      | "getAlchemicaAddresses"
      | "getAlchemicaAddresses()"
      | "getAvailableAlchemica"
      | "getAvailableAlchemica(uint256)"
      | "getCapacities"
      | "getCapacities(uint256)"
      | "getHarvestRates"
      | "getHarvestRates(uint256)"
      | "getLastChanneled"
      | "getLastChanneled(uint256)"
      | "getParcelLastChanneled"
      | "getParcelLastChanneled(uint256)"
      | "getRealmAlchemica"
      | "getRealmAlchemica(uint256)"
      | "getRoundAlchemica"
      | "getRoundAlchemica(uint256,uint256)"
      | "getRoundBaseAlchemica"
      | "getRoundBaseAlchemica(uint256,uint256)"
      | "getTotalAlchemicas"
      | "getTotalAlchemicas()"
      | "getTotalClaimed"
      | "getTotalClaimed(uint256)"
      | "isSurveying"
      | "isSurveying(uint256)"
      | "lastClaimedAlchemica"
      | "lastClaimedAlchemica(uint256)"
      | "progressSurveyingRound"
      | "progressSurveyingRound()"
      | "setChannelingLimits"
      | "setChannelingLimits(uint256[],uint256[])"
      | "setTotalAlchemicas"
      | "setTotalAlchemicas(uint256[4][5])"
      | "setVars"
      | "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"
      | "startSurveying"
      | "startSurveying(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchTransferAlchemica",
    values: [
      PromiseOrValue<string>[],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferAlchemica(address[],uint256[4][])",
    values: [
      PromiseOrValue<string>[],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferTokens",
    values: [
      PromiseOrValue<string>[][],
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferTokens(address[][],uint256[][],address[])",
    values: [
      PromiseOrValue<string>[][],
      PromiseOrValue<BigNumberish>[][],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferTokensToGotchis",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferTokensToGotchis(uint256[],address[],uint256[][])",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "channelAlchemica",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "channelAlchemica(uint256,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAvailableAlchemica",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAvailableAlchemica(uint256,uint256,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlchemicaAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAlchemicaAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAlchemica",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAlchemica(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacities",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapacities(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestRates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestRates(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastChanneled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastChanneled(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParcelLastChanneled",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParcelLastChanneled(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmAlchemica",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmAlchemica(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundAlchemica",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundAlchemica(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundBaseAlchemica",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundBaseAlchemica(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAlchemicas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAlchemicas()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimed(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSurveying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSurveying(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimedAlchemica",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimedAlchemica(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "progressSurveyingRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "progressSurveyingRound()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelingLimits",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setChannelingLimits(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalAlchemicas",
    values: [
      [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalAlchemicas(uint256[4][5])",
    values: [
      [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVars",
    values: [
      [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)",
    values: [
      [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startSurveying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startSurveying(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchTransferAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferAlchemica(address[],uint256[4][])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferTokens(address[][],uint256[][],address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferTokensToGotchis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferTokensToGotchis(uint256[],address[],uint256[][])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelAlchemica(uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAvailableAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAvailableAlchemica(uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlchemicaAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlchemicaAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAlchemica(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapacities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCapacities(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestRates(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastChanneled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastChanneled(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParcelLastChanneled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParcelLastChanneled(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmAlchemica(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundAlchemica(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundBaseAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundBaseAlchemica(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAlchemicas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAlchemicas()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimed(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSurveying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSurveying(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedAlchemica",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedAlchemica(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "progressSurveyingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "progressSurveyingRound()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChannelingLimits(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalAlchemicas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalAlchemicas(uint256[4][5])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSurveying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSurveying(uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ChannelAlchemica(uint256,uint256,uint256[4],uint256,uint256)": EventFragment;
    "ExitAlchemica(uint256,uint256[])": EventFragment;
    "StartSurveying(uint256,uint256)": EventFragment;
    "SurveyingRoundProgressed(uint256)": EventFragment;
    "TransferTokensToGotchi(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChannelAlchemica"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChannelAlchemica(uint256,uint256,uint256[4],uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitAlchemica"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitAlchemica(uint256,uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartSurveying"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StartSurveying(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SurveyingRoundProgressed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SurveyingRoundProgressed(uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokensToGotchi"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferTokensToGotchi(address,uint256,address,uint256)"
  ): EventFragment;
}

export interface ChannelAlchemicaEventObject {
  _realmId: BigNumber;
  _gotchiId: BigNumber;
  _alchemica: [BigNumber, BigNumber, BigNumber, BigNumber];
  _spilloverRate: BigNumber;
  _spilloverRadius: BigNumber;
}
export type ChannelAlchemicaEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber
  ],
  ChannelAlchemicaEventObject
>;

export type ChannelAlchemicaEventFilter =
  TypedEventFilter<ChannelAlchemicaEvent>;

export interface ExitAlchemicaEventObject {
  _gotchiId: BigNumber;
  _alchemica: BigNumber[];
}
export type ExitAlchemicaEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  ExitAlchemicaEventObject
>;

export type ExitAlchemicaEventFilter = TypedEventFilter<ExitAlchemicaEvent>;

export interface StartSurveyingEventObject {
  _realmId: BigNumber;
  _round: BigNumber;
}
export type StartSurveyingEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartSurveyingEventObject
>;

export type StartSurveyingEventFilter = TypedEventFilter<StartSurveyingEvent>;

export interface SurveyingRoundProgressedEventObject {
  _newRound: BigNumber;
}
export type SurveyingRoundProgressedEvent = TypedEvent<
  [BigNumber],
  SurveyingRoundProgressedEventObject
>;

export type SurveyingRoundProgressedEventFilter =
  TypedEventFilter<SurveyingRoundProgressedEvent>;

export interface TransferTokensToGotchiEventObject {
  _sender: string;
  _gotchiId: BigNumber;
  _tokenAddresses: string;
  _amount: BigNumber;
}
export type TransferTokensToGotchiEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  TransferTokensToGotchiEventObject
>;

export type TransferTokensToGotchiEventFilter =
  TypedEventFilter<TransferTokensToGotchiEvent>;

export interface AlchemicaFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlchemicaFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchTransferAlchemica(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransferAlchemica(address[],uint256[4][])"(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchTransferTokens(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransferTokens(address[][],uint256[][],address[])"(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchTransferTokensToGotchis(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    channelAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "channelAlchemica(uint256,uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimAvailableAlchemica(uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAlchemicaAddresses(
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string]]>;

    "getAlchemicaAddresses()"(
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string]]>;

    getAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber]] & {
        _availableAlchemica: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    "getAvailableAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber]] & {
        _availableAlchemica: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    getCapacities(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { capacities: BigNumber[] }>;

    "getCapacities(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { capacities: BigNumber[] }>;

    getHarvestRates(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { harvestRates: BigNumber[] }>;

    "getHarvestRates(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { harvestRates: BigNumber[] }>;

    getLastChanneled(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastChanneled(uint256)"(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getParcelLastChanneled(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getParcelLastChanneled(uint256)"(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRealmAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber]]>;

    "getRealmAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber]]>;

    getRoundAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getRoundAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRoundBaseAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getRoundBaseAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalAlchemicas(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber]
        ]
      ]
    >;

    "getTotalAlchemicas()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber],
          [BigNumber, BigNumber, BigNumber, BigNumber]
        ]
      ]
    >;

    getTotalClaimed(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { totalClaimed: BigNumber[] }>;

    "getTotalClaimed(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { totalClaimed: BigNumber[] }>;

    isSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastClaimedAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastClaimedAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    progressSurveyingRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "progressSurveyingRound()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChannelingLimits(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setChannelingLimits(uint256[],uint256[])"(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTotalAlchemicas(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTotalAlchemicas(uint256[4][5])"(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVars(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchTransferAlchemica(
    _targets: PromiseOrValue<string>[],
    _amounts: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransferAlchemica(address[],uint256[4][])"(
    _targets: PromiseOrValue<string>[],
    _amounts: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchTransferTokens(
    _tokens: PromiseOrValue<string>[][],
    _amounts: PromiseOrValue<BigNumberish>[][],
    _to: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransferTokens(address[][],uint256[][],address[])"(
    _tokens: PromiseOrValue<string>[][],
    _amounts: PromiseOrValue<BigNumberish>[][],
    _to: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchTransferTokensToGotchis(
    _gotchiIds: PromiseOrValue<BigNumberish>[],
    _tokenAddresses: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"(
    _gotchiIds: PromiseOrValue<BigNumberish>[],
    _tokenAddresses: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  channelAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _lastChanneled: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "channelAlchemica(uint256,uint256,uint256,bytes)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _lastChanneled: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAvailableAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimAvailableAlchemica(uint256,uint256,bytes)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _gotchiId: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAlchemicaAddresses(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  "getAlchemicaAddresses()"(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getAvailableAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getAvailableAlchemica(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getCapacities(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getCapacities(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getHarvestRates(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getHarvestRates(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLastChanneled(
    _gotchiId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastChanneled(uint256)"(
    _gotchiId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParcelLastChanneled(
    _parcelId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getParcelLastChanneled(uint256)"(
    _parcelId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRealmAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getRealmAlchemica(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getRoundAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getRoundAlchemica(uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRoundBaseAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getRoundBaseAlchemica(uint256,uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalAlchemicas(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber]
    ]
  >;

  "getTotalAlchemicas()"(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber, BigNumber]
    ]
  >;

  getTotalClaimed(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTotalClaimed(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isSurveying(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSurveying(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastClaimedAlchemica(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastClaimedAlchemica(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  progressSurveyingRound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "progressSurveyingRound()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChannelingLimits(
    _altarLevel: PromiseOrValue<BigNumberish>[],
    _limits: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setChannelingLimits(uint256[],uint256[])"(
    _altarLevel: PromiseOrValue<BigNumberish>[],
    _limits: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTotalAlchemicas(
    _totalAlchemicas: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTotalAlchemicas(uint256[4][5])"(
    _totalAlchemicas: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVars(
    _alchemicas: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ],
    _boostMultipliers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _greatPortalCapacity: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _installationsDiamond: PromiseOrValue<string>,
    _vrfCoordinator: PromiseOrValue<string>,
    _linkAddress: PromiseOrValue<string>,
    _alchemicaAddresses: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _gltrAddress: PromiseOrValue<string>,
    _backendPubKey: PromiseOrValue<BytesLike>,
    _gameManager: PromiseOrValue<string>,
    _tileDiamond: PromiseOrValue<string>,
    _aavegotchiDiamond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"(
    _alchemicas: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ],
    _boostMultipliers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _greatPortalCapacity: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _installationsDiamond: PromiseOrValue<string>,
    _vrfCoordinator: PromiseOrValue<string>,
    _linkAddress: PromiseOrValue<string>,
    _alchemicaAddresses: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _gltrAddress: PromiseOrValue<string>,
    _backendPubKey: PromiseOrValue<BytesLike>,
    _gameManager: PromiseOrValue<string>,
    _tileDiamond: PromiseOrValue<string>,
    _aavegotchiDiamond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startSurveying(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startSurveying(uint256)"(
    _realmId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchTransferAlchemica(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferAlchemica(address[],uint256[4][])"(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferTokens(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferTokens(address[][],uint256[][],address[])"(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferTokensToGotchis(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    channelAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "channelAlchemica(uint256,uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAvailableAlchemica(uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAlchemicaAddresses(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    "getAlchemicaAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getAvailableAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCapacities(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getCapacities(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getHarvestRates(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getHarvestRates(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLastChanneled(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastChanneled(uint256)"(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParcelLastChanneled(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParcelLastChanneled(uint256)"(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getRealmAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRoundAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getRoundAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRoundBaseAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getRoundBaseAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalAlchemicas(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber]
      ]
    >;

    "getTotalAlchemicas()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber, BigNumber]
      ]
    >;

    getTotalClaimed(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTotalClaimed(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastClaimedAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastClaimedAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    progressSurveyingRound(overrides?: CallOverrides): Promise<void>;

    "progressSurveyingRound()"(overrides?: CallOverrides): Promise<void>;

    setChannelingLimits(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setChannelingLimits(uint256[],uint256[])"(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalAlchemicas(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTotalAlchemicas(uint256[4][5])"(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setVars(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "startSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChannelAlchemica(uint256,uint256,uint256[4],uint256,uint256)"(
      _realmId?: PromiseOrValue<BigNumberish> | null,
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _alchemica?: null,
      _spilloverRate?: null,
      _spilloverRadius?: null
    ): ChannelAlchemicaEventFilter;
    ChannelAlchemica(
      _realmId?: PromiseOrValue<BigNumberish> | null,
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _alchemica?: null,
      _spilloverRate?: null,
      _spilloverRadius?: null
    ): ChannelAlchemicaEventFilter;

    "ExitAlchemica(uint256,uint256[])"(
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _alchemica?: null
    ): ExitAlchemicaEventFilter;
    ExitAlchemica(
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _alchemica?: null
    ): ExitAlchemicaEventFilter;

    "StartSurveying(uint256,uint256)"(
      _realmId?: null,
      _round?: null
    ): StartSurveyingEventFilter;
    StartSurveying(_realmId?: null, _round?: null): StartSurveyingEventFilter;

    "SurveyingRoundProgressed(uint256)"(
      _newRound?: PromiseOrValue<BigNumberish> | null
    ): SurveyingRoundProgressedEventFilter;
    SurveyingRoundProgressed(
      _newRound?: PromiseOrValue<BigNumberish> | null
    ): SurveyingRoundProgressedEventFilter;

    "TransferTokensToGotchi(address,uint256,address,uint256)"(
      _sender?: PromiseOrValue<string> | null,
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _tokenAddresses?: null,
      _amount?: null
    ): TransferTokensToGotchiEventFilter;
    TransferTokensToGotchi(
      _sender?: PromiseOrValue<string> | null,
      _gotchiId?: PromiseOrValue<BigNumberish> | null,
      _tokenAddresses?: null,
      _amount?: null
    ): TransferTokensToGotchiEventFilter;
  };

  estimateGas: {
    batchTransferAlchemica(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransferAlchemica(address[],uint256[4][])"(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchTransferTokens(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransferTokens(address[][],uint256[][],address[])"(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchTransferTokensToGotchis(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    channelAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "channelAlchemica(uint256,uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimAvailableAlchemica(uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAlchemicaAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "getAlchemicaAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvailableAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapacities(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCapacities(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHarvestRates(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHarvestRates(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastChanneled(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastChanneled(uint256)"(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParcelLastChanneled(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParcelLastChanneled(uint256)"(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealmAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoundAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundBaseAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoundBaseAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAlchemicas(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalAlchemicas()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalClaimed(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalClaimed(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimedAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastClaimedAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    progressSurveyingRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "progressSurveyingRound()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChannelingLimits(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setChannelingLimits(uint256[],uint256[])"(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTotalAlchemicas(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTotalAlchemicas(uint256[4][5])"(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVars(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchTransferAlchemica(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransferAlchemica(address[],uint256[4][])"(
      _targets: PromiseOrValue<string>[],
      _amounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferTokens(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransferTokens(address[][],uint256[][],address[])"(
      _tokens: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[][],
      _to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferTokensToGotchis(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransferTokensToGotchis(uint256[],address[],uint256[][])"(
      _gotchiIds: PromiseOrValue<BigNumberish>[],
      _tokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    channelAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "channelAlchemica(uint256,uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _lastChanneled: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimAvailableAlchemica(uint256,uint256,bytes)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _gotchiId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAlchemicaAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAlchemicaAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvailableAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapacities(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCapacities(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHarvestRates(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHarvestRates(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastChanneled(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastChanneled(uint256)"(
      _gotchiId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParcelLastChanneled(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParcelLastChanneled(uint256)"(
      _parcelId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealmAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealmAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoundAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundBaseAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoundBaseAlchemica(uint256,uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAlchemicas(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalAlchemicas()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalClaimed(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalClaimed(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimedAlchemica(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastClaimedAlchemica(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    progressSurveyingRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "progressSurveyingRound()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChannelingLimits(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setChannelingLimits(uint256[],uint256[])"(
      _altarLevel: PromiseOrValue<BigNumberish>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTotalAlchemicas(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTotalAlchemicas(uint256[4][5])"(
      _totalAlchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVars(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setVars(uint256[4][5],uint256[4],uint256[4],address,address,address,address[4],address,bytes,address,address,address)"(
      _alchemicas: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ]
      ],
      _boostMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _greatPortalCapacity: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _installationsDiamond: PromiseOrValue<string>,
      _vrfCoordinator: PromiseOrValue<string>,
      _linkAddress: PromiseOrValue<string>,
      _alchemicaAddresses: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gltrAddress: PromiseOrValue<string>,
      _backendPubKey: PromiseOrValue<BytesLike>,
      _gameManager: PromiseOrValue<string>,
      _tileDiamond: PromiseOrValue<string>,
      _aavegotchiDiamond: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startSurveying(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startSurveying(uint256)"(
      _realmId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
