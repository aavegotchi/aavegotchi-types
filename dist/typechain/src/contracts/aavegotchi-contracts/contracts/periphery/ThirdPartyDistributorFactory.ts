/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace ThirdPartyDistributor {
  export type DistributionStruct = {
    beneficiary: PromiseOrValue<string>;
    proportion: PromiseOrValue<BigNumberish>;
  };

  export type DistributionStructOutput = [string, number] & {
    beneficiary: string;
    proportion: number;
  };
}

export interface ThirdPartyDistributorFactoryInterface extends utils.Interface {
  functions: {
    "deploy(address,(address,uint32)[],uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "deploy(address,(address,uint32)[],uint8)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      ThirdPartyDistributor.DistributionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(address,(address,uint32)[],uint8)",
    values: [
      PromiseOrValue<string>,
      ThirdPartyDistributor.DistributionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(address,(address,uint32)[],uint8)",
    data: BytesLike
  ): Result;

  events: {
    "ContractDeployed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContractDeployed(address,address)"
  ): EventFragment;
}

export interface ContractDeployedEventObject {
  owner: string;
  distributor: string;
}
export type ContractDeployedEvent = TypedEvent<
  [string, string],
  ContractDeployedEventObject
>;

export type ContractDeployedEventFilter =
  TypedEventFilter<ContractDeployedEvent>;

export interface ThirdPartyDistributorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThirdPartyDistributorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,(address,uint32)[],uint8)"(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deploy(
    _owner: PromiseOrValue<string>,
    _distributions: ThirdPartyDistributor.DistributionStruct[],
    _releaseAccess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,(address,uint32)[],uint8)"(
    _owner: PromiseOrValue<string>,
    _distributions: ThirdPartyDistributor.DistributionStruct[],
    _releaseAccess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deploy(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,(address,uint32)[],uint8)"(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContractDeployed(address,address)"(
      owner?: null,
      distributor?: null
    ): ContractDeployedEventFilter;
    ContractDeployed(
      owner?: null,
      distributor?: null
    ): ContractDeployedEventFilter;
  };

  estimateGas: {
    deploy(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deploy(address,(address,uint32)[],uint8)"(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,(address,uint32)[],uint8)"(
      _owner: PromiseOrValue<string>,
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
