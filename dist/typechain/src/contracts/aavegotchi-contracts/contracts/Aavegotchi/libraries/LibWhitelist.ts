/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface LibWhitelistInterface extends utils.Interface {
  functions: {};

  events: {
    "WhitelistAccessRightSet(uint32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WhitelistAccessRightSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistAccessRightSet(uint32,uint256,uint256)"
  ): EventFragment;
}

export interface WhitelistAccessRightSetEventObject {
  whitelistId: number;
  actionRight: BigNumber;
  accessRight: BigNumber;
}
export type WhitelistAccessRightSetEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  WhitelistAccessRightSetEventObject
>;

export type WhitelistAccessRightSetEventFilter =
  TypedEventFilter<WhitelistAccessRightSetEvent>;

export interface LibWhitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibWhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "WhitelistAccessRightSet(uint32,uint256,uint256)"(
      whitelistId?: PromiseOrValue<BigNumberish> | null,
      actionRight?: PromiseOrValue<BigNumberish> | null,
      accessRight?: PromiseOrValue<BigNumberish> | null
    ): WhitelistAccessRightSetEventFilter;
    WhitelistAccessRightSet(
      whitelistId?: PromiseOrValue<BigNumberish> | null,
      actionRight?: PromiseOrValue<BigNumberish> | null,
      accessRight?: PromiseOrValue<BigNumberish> | null
    ): WhitelistAccessRightSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
