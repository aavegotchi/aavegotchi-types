/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../common";

export interface VrfFacetInterface extends utils.Interface {
  functions: {
    "changeVrf(uint256,bytes32,address,address)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "link()": FunctionFragment;
    "linkBalance()": FunctionFragment;
    "openPortals(uint256[])": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "removeLinkTokens(address,uint256)": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeVrf"
      | "changeVrf(uint256,bytes32,address,address)"
      | "keyHash"
      | "keyHash()"
      | "link"
      | "link()"
      | "linkBalance"
      | "linkBalance()"
      | "openPortals"
      | "openPortals(uint256[])"
      | "rawFulfillRandomness"
      | "rawFulfillRandomness(bytes32,uint256)"
      | "removeLinkTokens"
      | "removeLinkTokens(address,uint256)"
      | "vrfCoordinator"
      | "vrfCoordinator()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeVrf",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVrf(uint256,bytes32,address,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "keyHash()", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(functionFragment: "link()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "linkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPortals",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openPortals(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "changeVrf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVrf(uint256,bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPortals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPortals(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator()",
    data: BytesLike
  ): Result;

  events: {
    "OpenPortals(uint256[])": EventFragment;
    "PortalOpened(uint256)": EventFragment;
    "VrfRandomNumber(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpenPortals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPortals(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PortalOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PortalOpened(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VrfRandomNumber"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VrfRandomNumber(uint256,uint256,uint256)"
  ): EventFragment;
}

export interface OpenPortalsEventObject {
  _tokenIds: BigNumber[];
}
export type OpenPortalsEvent = TypedEvent<
  [BigNumber[]],
  OpenPortalsEventObject
>;

export type OpenPortalsEventFilter = TypedEventFilter<OpenPortalsEvent>;

export interface PortalOpenedEventObject {
  tokenId: BigNumber;
}
export type PortalOpenedEvent = TypedEvent<
  [BigNumber],
  PortalOpenedEventObject
>;

export type PortalOpenedEventFilter = TypedEventFilter<PortalOpenedEvent>;

export interface VrfRandomNumberEventObject {
  tokenId: BigNumber;
  randomNumber: BigNumber;
  _vrfTimeSet: BigNumber;
}
export type VrfRandomNumberEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  VrfRandomNumberEventObject
>;

export type VrfRandomNumberEventFilter = TypedEventFilter<VrfRandomNumberEvent>;

export interface VrfFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VrfFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeVrf(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeVrf(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    "keyHash()"(overrides?: CallOverrides): Promise<[string]>;

    link(overrides?: CallOverrides): Promise<[string]>;

    "link()"(overrides?: CallOverrides): Promise<[string]>;

    linkBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    "linkBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    openPortals(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "openPortals(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;

    "vrfCoordinator()"(overrides?: CallOverrides): Promise<[string]>;
  };

  changeVrf(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeVrf(uint256,bytes32,address,address)"(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  "keyHash()"(overrides?: CallOverrides): Promise<string>;

  link(overrides?: CallOverrides): Promise<string>;

  "link()"(overrides?: CallOverrides): Promise<string>;

  linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  openPortals(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "openPortals(uint256[])"(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomness(
    _requestId: PromiseOrValue<BytesLike>,
    _randomNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rawFulfillRandomness(bytes32,uint256)"(
    _requestId: PromiseOrValue<BytesLike>,
    _randomNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLinkTokens(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeLinkTokens(address,uint256)"(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  "vrfCoordinator()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeVrf(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeVrf(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    "keyHash()"(overrides?: CallOverrides): Promise<string>;

    link(overrides?: CallOverrides): Promise<string>;

    "link()"(overrides?: CallOverrides): Promise<string>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    openPortals(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "openPortals(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;

    "vrfCoordinator()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OpenPortals(uint256[])"(_tokenIds?: null): OpenPortalsEventFilter;
    OpenPortals(_tokenIds?: null): OpenPortalsEventFilter;

    "PortalOpened(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): PortalOpenedEventFilter;
    PortalOpened(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): PortalOpenedEventFilter;

    "VrfRandomNumber(uint256,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null,
      _vrfTimeSet?: null
    ): VrfRandomNumberEventFilter;
    VrfRandomNumber(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null,
      _vrfTimeSet?: null
    ): VrfRandomNumberEventFilter;
  };

  estimateGas: {
    changeVrf(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeVrf(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    "keyHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    link(overrides?: CallOverrides): Promise<BigNumber>;

    "link()"(overrides?: CallOverrides): Promise<BigNumber>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    openPortals(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "openPortals(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    "vrfCoordinator()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeVrf(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeVrf(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "keyHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "link()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "linkBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPortals(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "openPortals(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vrfCoordinator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
