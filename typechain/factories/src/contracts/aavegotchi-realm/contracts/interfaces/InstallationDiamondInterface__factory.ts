/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  InstallationDiamondInterface,
  InstallationDiamondInterfaceInterface,
} from "../../../../../../src/contracts/aavegotchi-realm/contracts/interfaces/InstallationDiamondInterface";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "width",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "height",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "installationType",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "level",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "alchemicaType",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "spillRadius",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "spillRate",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "upgradeQueueBoost",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "craftTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nextLevelId",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "deprecated",
            type: "bool",
          },
          {
            internalType: "uint256[4]",
            name: "alchemicaCost",
            type: "uint256[4]",
          },
          {
            internalType: "uint256",
            name: "harvestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "capacity",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "prerequisites",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct InstallationDiamondInterface.InstallationType[]",
        name: "_installationTypes",
        type: "tuple[]",
      },
    ],
    name: "addInstallationTypes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "bal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "balanceOfToken",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_queueIds",
        type: "uint256[]",
      },
    ],
    name: "claimInstallations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_installationTypes",
        type: "uint256[]",
      },
    ],
    name: "craftInstallations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_realmTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "equipInstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "finalizeUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAlchemicaAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_altarId",
        type: "uint256",
      },
    ],
    name: "getAltarLevel",
    outputs: [
      {
        internalType: "uint256",
        name: "altarLevel_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemId",
        type: "uint256",
      },
    ],
    name: "getInstallationType",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "width",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "height",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "installationType",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "level",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "alchemicaType",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "spillRadius",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "spillRate",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "upgradeQueueBoost",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "craftTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nextLevelId",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "deprecated",
            type: "bool",
          },
          {
            internalType: "uint256[4]",
            name: "alchemicaCost",
            type: "uint256[4]",
          },
          {
            internalType: "uint256",
            name: "harvestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "capacity",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "prerequisites",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct InstallationDiamondInterface.InstallationType",
        name: "installationType",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_itemIds",
        type: "uint256[]",
      },
    ],
    name: "getInstallationTypes",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "width",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "height",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "installationType",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "level",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "alchemicaType",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "spillRadius",
            type: "uint32",
          },
          {
            internalType: "uint16",
            name: "spillRate",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "upgradeQueueBoost",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "craftTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "nextLevelId",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "deprecated",
            type: "bool",
          },
          {
            internalType: "uint256[4]",
            name: "alchemicaCost",
            type: "uint256[4]",
          },
          {
            internalType: "uint256",
            name: "harvestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "capacity",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "prerequisites",
            type: "uint256[]",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct InstallationDiamondInterface.InstallationType[]",
        name: "itemTypes_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "getInstallationUnequipType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "getLodgeLevel",
    outputs: [
      {
        internalType: "uint256",
        name: "lodgeLevel_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
    ],
    name: "getParcelUpgradeQueue",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "coordinateX",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "coordinateY",
            type: "uint16",
          },
          {
            internalType: "uint40",
            name: "readyBlock",
            type: "uint40",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "parcelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "installationId",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamondInterface.UpgradeQueue[]",
        name: "output_",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "indexes_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "getReservoirCapacity",
    outputs: [
      {
        internalType: "uint256",
        name: "capacity_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "getReservoirStats",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "spillRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spillRadius",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "capacity",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamondInterface.ReservoirStats",
        name: "reservoirStats_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "installationBalancesOfToken",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "installationId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamondInterface.InstallationIdIO[]",
        name: "bals_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
    ],
    name: "installationBalancesOfTokenByIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "installationsBalances",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "installationId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamondInterface.InstallationIdIO[]",
        name: "bals_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_y",
        type: "uint256",
      },
    ],
    name: "parcelInstallationUpgrading",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
    ],
    name: "parcelQueueEmpty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "spilloverRateAndRadiusOfId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
    ],
    name: "spilloverRatesOfIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "unequipInstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "coordinateX",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "coordinateY",
            type: "uint16",
          },
          {
            internalType: "uint40",
            name: "readyBlock",
            type: "uint40",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "parcelId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "installationId",
            type: "uint256",
          },
        ],
        internalType: "struct InstallationDiamondInterface.UpgradeQueue",
        name: "_upgradeQueue",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "upgradeInstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class InstallationDiamondInterface__factory {
  static readonly abi = _abi;
  static createInterface(): InstallationDiamondInterfaceInterface {
    return new utils.Interface(_abi) as InstallationDiamondInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InstallationDiamondInterface {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as InstallationDiamondInterface;
  }
}
