/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  RealmDiamond,
  RealmDiamondInterface,
} from "../../../../../../src/contracts/aavegotchi-realm/contracts/interfaces/RealmDiamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
    ],
    name: "addUpgradeQueueLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_coordinateX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_coordinateY",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_installationId",
        type: "uint256",
      },
    ],
    name: "checkCoordinates",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAlchemicaAddresses",
    outputs: [
      {
        internalType: "address[4]",
        name: "",
        type: "address[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
    ],
    name: "getAltarId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
    ],
    name: "getParcelUpgradeQueueCapacity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_parcelId",
        type: "uint256",
      },
    ],
    name: "getParcelUpgradeQueueLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
    ],
    name: "subUpgradeQueueLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "tokenIdsOfOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_prevInstallationId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nextInstallationId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_coordinateX",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_coordinateY",
        type: "uint256",
      },
    ],
    name: "upgradeInstallation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gotchiId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_actionRight",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "verifyAccessRight",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class RealmDiamond__factory {
  static readonly abi = _abi;
  static createInterface(): RealmDiamondInterface {
    return new utils.Interface(_abi) as RealmDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RealmDiamond {
    return new Contract(address, _abi, signerOrProvider) as RealmDiamond;
  }
}
