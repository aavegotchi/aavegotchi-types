/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  LibAlchemica,
  LibAlchemicaInterface,
} from "../../../../../../src/contracts/aavegotchi-realm/contracts/libraries/LibAlchemica";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_realmId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_gotchiId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_alchemicaType",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_spilloverRate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_spilloverRadius",
        type: "uint256",
      },
    ],
    name: "AlchemicaClaimed",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a4d71f5f229767593a1c59bfb5bf1f5909f244896433009be793d1e6485492c64736f6c63430008090033";

type LibAlchemicaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibAlchemicaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibAlchemica__factory extends ContractFactory {
  constructor(...args: LibAlchemicaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibAlchemica> {
    return super.deploy(overrides || {}) as Promise<LibAlchemica>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibAlchemica {
    return super.attach(address) as LibAlchemica;
  }
  override connect(signer: Signer): LibAlchemica__factory {
    return super.connect(signer) as LibAlchemica__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibAlchemicaInterface {
    return new utils.Interface(_abi) as LibAlchemicaInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAlchemica {
    return new Contract(address, _abi, signerOrProvider) as LibAlchemica;
  }
}
