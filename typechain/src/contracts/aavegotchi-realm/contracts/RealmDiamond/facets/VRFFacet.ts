/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type RequestConfigStruct = {
  subId: PromiseOrValue<BigNumberish>;
  callbackGasLimit: PromiseOrValue<BigNumberish>;
  requestConfirmations: PromiseOrValue<BigNumberish>;
  numWords: PromiseOrValue<BigNumberish>;
  keyHash: PromiseOrValue<BytesLike>;
};

export type RequestConfigStructOutput = [
  BigNumber,
  number,
  number,
  number,
  string
] & {
  subId: BigNumber;
  callbackGasLimit: number;
  requestConfirmations: number;
  numWords: number;
  keyHash: string;
};

export interface VRFFacetInterface extends utils.Interface {
  functions: {
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "setConfig((uint64,uint32,uint16,uint32,bytes32),address)": FunctionFragment;
    "subscribe()": FunctionFragment;
    "topUpSubscription(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "rawFulfillRandomWords"
      | "rawFulfillRandomWords(uint256,uint256[])"
      | "setConfig"
      | "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"
      | "subscribe"
      | "subscribe()"
      | "topUpSubscription"
      | "topUpSubscription(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords(uint256,uint256[])",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [RequestConfigStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig((uint64,uint32,uint16,uint32,bytes32),address)",
    values: [RequestConfigStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscribe()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUpSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpSubscription(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords(uint256,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConfig((uint64,uint32,uint16,uint32,bytes32),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribe()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpSubscription(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VRFFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRFFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "subscribe()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topUpSubscription(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "topUpSubscription(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rawFulfillRandomWords(uint256,uint256[])"(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _requestConfig: RequestConfigStruct,
    _vrfCoordinator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"(
    _requestConfig: RequestConfigStruct,
    _vrfCoordinator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "subscribe()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topUpSubscription(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "topUpSubscription(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(overrides?: CallOverrides): Promise<void>;

    "subscribe()"(overrides?: CallOverrides): Promise<void>;

    topUpSubscription(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "topUpSubscription(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "subscribe()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topUpSubscription(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "topUpSubscription(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomWords(uint256,uint256[])"(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setConfig((uint64,uint32,uint16,uint32,bytes32),address)"(
      _requestConfig: RequestConfigStruct,
      _vrfCoordinator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "subscribe()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topUpSubscription(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "topUpSubscription(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
