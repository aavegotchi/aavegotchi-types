/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type BounceGateStruct = {
  title: PromiseOrValue<string>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  priority: PromiseOrValue<BigNumberish>;
  equipped: PromiseOrValue<boolean>;
  lastTimeUpdated: PromiseOrValue<BigNumberish>;
};

export type BounceGateStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber
] & {
  title: string;
  startTime: BigNumber;
  endTime: BigNumber;
  priority: BigNumber;
  equipped: boolean;
  lastTimeUpdated: BigNumber;
};

export interface LibBounceGateInterface extends utils.Interface {
  functions: {};

  events: {
    "EventCancelled(uint256)": EventFragment;
    "EventPriorityAndDurationUpdated(uint256,uint120,uint64)": EventFragment;
    "EventStarted(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCancelled(uint256)"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventPriorityAndDurationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventPriorityAndDurationUpdated(uint256,uint120,uint64)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventStarted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EventStarted(uint256,tuple)"
  ): EventFragment;
}

export interface EventCancelledEventObject {
  _eventId: BigNumber;
}
export type EventCancelledEvent = TypedEvent<
  [BigNumber],
  EventCancelledEventObject
>;

export type EventCancelledEventFilter = TypedEventFilter<EventCancelledEvent>;

export interface EventPriorityAndDurationUpdatedEventObject {
  _eventId: BigNumber;
  _newPriority: BigNumber;
  _newEndTime: BigNumber;
}
export type EventPriorityAndDurationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EventPriorityAndDurationUpdatedEventObject
>;

export type EventPriorityAndDurationUpdatedEventFilter =
  TypedEventFilter<EventPriorityAndDurationUpdatedEvent>;

export interface EventStartedEventObject {
  _eventId: BigNumber;
  eventDetails: BounceGateStructOutput;
}
export type EventStartedEvent = TypedEvent<
  [BigNumber, BounceGateStructOutput],
  EventStartedEventObject
>;

export type EventStartedEventFilter = TypedEventFilter<EventStartedEvent>;

export interface LibBounceGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibBounceGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "EventCancelled(uint256)"(
      _eventId?: PromiseOrValue<BigNumberish> | null
    ): EventCancelledEventFilter;
    EventCancelled(
      _eventId?: PromiseOrValue<BigNumberish> | null
    ): EventCancelledEventFilter;

    "EventPriorityAndDurationUpdated(uint256,uint120,uint64)"(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      _newPriority?: null,
      _newEndTime?: null
    ): EventPriorityAndDurationUpdatedEventFilter;
    EventPriorityAndDurationUpdated(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      _newPriority?: null,
      _newEndTime?: null
    ): EventPriorityAndDurationUpdatedEventFilter;

    "EventStarted(uint256,tuple)"(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      eventDetails?: null
    ): EventStartedEventFilter;
    EventStarted(
      _eventId?: PromiseOrValue<BigNumberish> | null,
      eventDetails?: null
    ): EventStartedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
