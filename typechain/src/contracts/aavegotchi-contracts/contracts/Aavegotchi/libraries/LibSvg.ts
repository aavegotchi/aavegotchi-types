/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace LibSvg {
  export type SvgTypeAndSizesStruct = {
    svgType: PromiseOrValue<BytesLike>;
    sizes: PromiseOrValue<BigNumberish>[];
  };

  export type SvgTypeAndSizesStructOutput = [string, BigNumber[]] & {
    svgType: string;
    sizes: BigNumber[];
  };

  export type SvgTypeAndIdsAndSizesStruct = {
    svgType: PromiseOrValue<BytesLike>;
    ids: PromiseOrValue<BigNumberish>[];
    sizes: PromiseOrValue<BigNumberish>[];
  };

  export type SvgTypeAndIdsAndSizesStructOutput = [
    string,
    BigNumber[],
    BigNumber[]
  ] & { svgType: string; ids: BigNumber[]; sizes: BigNumber[] };
}

export interface LibSvgInterface extends utils.Interface {
  functions: {};

  events: {
    "StoreSvg(tuple[])": EventFragment;
    "UpdateSvg(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StoreSvg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSvg(tuple[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSvg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSvg(tuple[])"): EventFragment;
}

export interface StoreSvgEventObject {
  _typesAndSizes: LibSvg.SvgTypeAndSizesStructOutput[];
}
export type StoreSvgEvent = TypedEvent<
  [LibSvg.SvgTypeAndSizesStructOutput[]],
  StoreSvgEventObject
>;

export type StoreSvgEventFilter = TypedEventFilter<StoreSvgEvent>;

export interface UpdateSvgEventObject {
  _typesAndIdsAndSizes: LibSvg.SvgTypeAndIdsAndSizesStructOutput[];
}
export type UpdateSvgEvent = TypedEvent<
  [LibSvg.SvgTypeAndIdsAndSizesStructOutput[]],
  UpdateSvgEventObject
>;

export type UpdateSvgEventFilter = TypedEventFilter<UpdateSvgEvent>;

export interface LibSvg extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibSvgInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "StoreSvg(tuple[])"(_typesAndSizes?: null): StoreSvgEventFilter;
    StoreSvg(_typesAndSizes?: null): StoreSvgEventFilter;

    "UpdateSvg(tuple[])"(_typesAndIdsAndSizes?: null): UpdateSvgEventFilter;
    UpdateSvg(_typesAndIdsAndSizes?: null): UpdateSvgEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
