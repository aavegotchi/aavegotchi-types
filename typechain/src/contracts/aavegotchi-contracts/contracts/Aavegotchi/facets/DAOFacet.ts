/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type AavegotchiCollateralTypeInfoStruct = {
  modifiers: PromiseOrValue<BigNumberish>[];
  primaryColor: PromiseOrValue<BytesLike>;
  secondaryColor: PromiseOrValue<BytesLike>;
  cheekColor: PromiseOrValue<BytesLike>;
  svgId: PromiseOrValue<BigNumberish>;
  eyeShapeSvgId: PromiseOrValue<BigNumberish>;
  conversionRate: PromiseOrValue<BigNumberish>;
  delisted: PromiseOrValue<boolean>;
};

export type AavegotchiCollateralTypeInfoStructOutput = [
  number[],
  string,
  string,
  string,
  number,
  number,
  number,
  boolean
] & {
  modifiers: number[];
  primaryColor: string;
  secondaryColor: string;
  cheekColor: string;
  svgId: number;
  eyeShapeSvgId: number;
  conversionRate: number;
  delisted: boolean;
};

export type AavegotchiCollateralTypeIOStruct = {
  collateralType: PromiseOrValue<string>;
  collateralTypeInfo: AavegotchiCollateralTypeInfoStruct;
};

export type AavegotchiCollateralTypeIOStructOutput = [
  string,
  AavegotchiCollateralTypeInfoStructOutput
] & {
  collateralType: string;
  collateralTypeInfo: AavegotchiCollateralTypeInfoStructOutput;
};

export type DimensionsStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
  width: PromiseOrValue<BigNumberish>;
  height: PromiseOrValue<BigNumberish>;
};

export type DimensionsStructOutput = [number, number, number, number] & {
  x: number;
  y: number;
  width: number;
  height: number;
};

export type ItemTypeStruct = {
  name: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  author: PromiseOrValue<string>;
  traitModifiers: PromiseOrValue<BigNumberish>[];
  slotPositions: PromiseOrValue<boolean>[];
  allowedCollaterals: PromiseOrValue<BigNumberish>[];
  dimensions: DimensionsStruct;
  ghstPrice: PromiseOrValue<BigNumberish>;
  maxQuantity: PromiseOrValue<BigNumberish>;
  totalQuantity: PromiseOrValue<BigNumberish>;
  svgId: PromiseOrValue<BigNumberish>;
  rarityScoreModifier: PromiseOrValue<BigNumberish>;
  canPurchaseWithGhst: PromiseOrValue<boolean>;
  minLevel: PromiseOrValue<BigNumberish>;
  canBeTransferred: PromiseOrValue<boolean>;
  category: PromiseOrValue<BigNumberish>;
  kinshipBonus: PromiseOrValue<BigNumberish>;
  experienceBonus: PromiseOrValue<BigNumberish>;
};

export type ItemTypeStructOutput = [
  string,
  string,
  string,
  number[],
  boolean[],
  number[],
  DimensionsStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  boolean,
  number,
  boolean,
  number,
  number,
  number
] & {
  name: string;
  description: string;
  author: string;
  traitModifiers: number[];
  slotPositions: boolean[];
  allowedCollaterals: number[];
  dimensions: DimensionsStructOutput;
  ghstPrice: BigNumber;
  maxQuantity: BigNumber;
  totalQuantity: BigNumber;
  svgId: number;
  rarityScoreModifier: number;
  canPurchaseWithGhst: boolean;
  minLevel: number;
  canBeTransferred: boolean;
  category: number;
  kinshipBonus: number;
  experienceBonus: number;
};

export type WearableSetStruct = {
  name: PromiseOrValue<string>;
  allowedCollaterals: PromiseOrValue<BigNumberish>[];
  wearableIds: PromiseOrValue<BigNumberish>[];
  traitsBonuses: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
};

export type WearableSetStructOutput = [
  string,
  number[],
  number[],
  [number, number, number, number, number]
] & {
  name: string;
  allowedCollaterals: number[];
  wearableIds: number[];
  traitsBonuses: [number, number, number, number, number];
};

export declare namespace LibSvg {
  export type SvgTypeAndSizesStruct = {
    svgType: PromiseOrValue<BytesLike>;
    sizes: PromiseOrValue<BigNumberish>[];
  };

  export type SvgTypeAndSizesStructOutput = [string, BigNumber[]] & {
    svgType: string;
    sizes: BigNumber[];
  };
}

export declare namespace DAOFacet {
  export type CreateHauntPayloadStruct = {
    _hauntMaxSize: PromiseOrValue<BigNumberish>;
    _portalPrice: PromiseOrValue<BigNumberish>;
    _bodyColor: PromiseOrValue<BytesLike>;
    _collateralTypes: AavegotchiCollateralTypeIOStruct[];
    _collateralSvg: PromiseOrValue<string>;
    _collateralTypesAndSizes: LibSvg.SvgTypeAndSizesStruct[];
    _eyeShapeSvg: PromiseOrValue<string>;
    _eyeShapeTypesAndSizes: LibSvg.SvgTypeAndSizesStruct[];
  };

  export type CreateHauntPayloadStructOutput = [
    number,
    BigNumber,
    string,
    AavegotchiCollateralTypeIOStructOutput[],
    string,
    LibSvg.SvgTypeAndSizesStructOutput[],
    string,
    LibSvg.SvgTypeAndSizesStructOutput[]
  ] & {
    _hauntMaxSize: number;
    _portalPrice: BigNumber;
    _bodyColor: string;
    _collateralTypes: AavegotchiCollateralTypeIOStructOutput[];
    _collateralSvg: string;
    _collateralTypesAndSizes: LibSvg.SvgTypeAndSizesStructOutput[];
    _eyeShapeSvg: string;
    _eyeShapeTypesAndSizes: LibSvg.SvgTypeAndSizesStructOutput[];
  };
}

export interface DAOFacetInterface extends utils.Interface {
  functions: {
    "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])": FunctionFragment;
    "addGameManagers(address[],uint256[])": FunctionFragment;
    "addItemManagers(address[])": FunctionFragment;
    "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])": FunctionFragment;
    "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])": FunctionFragment;
    "addWearableSets((string,uint8[],uint16[],int8[5])[])": FunctionFragment;
    "batchUpdateItemsPrice(uint256[],uint256[])": FunctionFragment;
    "createHaunt(uint24,uint96,bytes3)": FunctionFragment;
    "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))": FunctionFragment;
    "gameManagerBalance(address)": FunctionFragment;
    "gameManagerRefreshTime(address)": FunctionFragment;
    "grantExperience(uint256[],uint256[])": FunctionFragment;
    "isGameManager(address)": FunctionFragment;
    "mintItems(address,uint256[],uint256[])": FunctionFragment;
    "removeExperience(uint256[],uint256[])": FunctionFragment;
    "removeGameManagers(address[])": FunctionFragment;
    "removeItemManagers(address[])": FunctionFragment;
    "setDao(address,address)": FunctionFragment;
    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)": FunctionFragment;
    "setWearableSlotPositions(uint256,bool[16])": FunctionFragment;
    "updateCollateralModifiers(address,int16[6])": FunctionFragment;
    "updateItemTypeMaxQuantity(uint256[],uint256[])": FunctionFragment;
    "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateralTypes"
      | "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"
      | "addGameManagers"
      | "addGameManagers(address[],uint256[])"
      | "addItemManagers"
      | "addItemManagers(address[])"
      | "addItemTypes"
      | "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"
      | "addItemTypesAndSvgs"
      | "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"
      | "addWearableSets"
      | "addWearableSets((string,uint8[],uint16[],int8[5])[])"
      | "batchUpdateItemsPrice"
      | "batchUpdateItemsPrice(uint256[],uint256[])"
      | "createHaunt"
      | "createHaunt(uint24,uint96,bytes3)"
      | "createHauntWithPayload"
      | "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"
      | "gameManagerBalance"
      | "gameManagerBalance(address)"
      | "gameManagerRefreshTime"
      | "gameManagerRefreshTime(address)"
      | "grantExperience"
      | "grantExperience(uint256[],uint256[])"
      | "isGameManager"
      | "isGameManager(address)"
      | "mintItems"
      | "mintItems(address,uint256[],uint256[])"
      | "removeExperience"
      | "removeExperience(uint256[],uint256[])"
      | "removeGameManagers"
      | "removeGameManagers(address[])"
      | "removeItemManagers"
      | "removeItemManagers(address[])"
      | "setDao"
      | "setDao(address,address)"
      | "setItemTraitModifiersAndRarityModifier"
      | "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"
      | "setWearableSlotPositions"
      | "setWearableSlotPositions(uint256,bool[16])"
      | "updateCollateralModifiers"
      | "updateCollateralModifiers(address,int16[6])"
      | "updateItemTypeMaxQuantity"
      | "updateItemTypeMaxQuantity(uint256[],uint256[])"
      | "updateWearableSets"
      | "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateralTypes",
    values: [PromiseOrValue<BigNumberish>, AavegotchiCollateralTypeIOStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])",
    values: [PromiseOrValue<BigNumberish>, AavegotchiCollateralTypeIOStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addGameManagers",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addGameManagers(address[],uint256[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemManagers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemManagers(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypes",
    values: [ItemTypeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])",
    values: [ItemTypeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypesAndSvgs",
    values: [
      ItemTypeStruct[],
      PromiseOrValue<string>,
      LibSvg.SvgTypeAndSizesStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])",
    values: [
      ItemTypeStruct[],
      PromiseOrValue<string>,
      LibSvg.SvgTypeAndSizesStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWearableSets",
    values: [WearableSetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addWearableSets((string,uint8[],uint16[],int8[5])[])",
    values: [WearableSetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateItemsPrice",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateItemsPrice(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createHaunt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createHaunt(uint24,uint96,bytes3)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createHauntWithPayload",
    values: [DAOFacet.CreateHauntPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))",
    values: [DAOFacet.CreateHauntPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerRefreshTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameManagerRefreshTime(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantExperience",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantExperience(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameManager(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintItems",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintItems(address,uint256[],uint256[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExperience",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExperience(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGameManagers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGameManagers(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeItemManagers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeItemManagers(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDao",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDao(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemTraitModifiersAndRarityModifier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWearableSlotPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWearableSlotPositions(uint256,bool[16])",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralModifiers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralModifiers(address,int16[6])",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemTypeMaxQuantity",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItemTypeMaxQuantity(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWearableSets",
    values: [PromiseOrValue<BigNumberish>[], WearableSetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])",
    values: [PromiseOrValue<BigNumberish>[], WearableSetStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameManagers(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemManagers(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypesAndSvgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWearableSets((string,uint8[],uint16[],int8[5])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateItemsPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateItemsPrice(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHaunt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHaunt(uint24,uint96,bytes3)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHauntWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerRefreshTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameManagerRefreshTime(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantExperience(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameManager(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintItems(address,uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExperience(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGameManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGameManagers(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeItemManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeItemManagers(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDao(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemTraitModifiersAndRarityModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWearableSlotPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWearableSlotPositions(uint256,bool[16])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralModifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralModifiers(address,int16[6])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemTypeMaxQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateItemTypeMaxQuantity(uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateralType(tuple)": EventFragment;
    "AddItemType(tuple)": EventFragment;
    "AddWearableSet(tuple)": EventFragment;
    "CreateHaunt(uint256,uint256,uint256,bytes32)": EventFragment;
    "DaoTransferred(address,address)": EventFragment;
    "DaoTreasuryTransferred(address,address)": EventFragment;
    "GameManagerAdded(address,uint256,uint256)": EventFragment;
    "GameManagerRemoved(address)": EventFragment;
    "GrantExperience(uint256[],uint256[])": EventFragment;
    "ItemManagerAdded(address)": EventFragment;
    "ItemManagerRemoved(address)": EventFragment;
    "ItemModifiersSet(uint256,int8[6],uint8)": EventFragment;
    "ItemTypeMaxQuantity(uint256[],uint256[])": EventFragment;
    "RemoveExperience(uint256[],uint256[])": EventFragment;
    "UpdateCollateralModifiers(int16[6],int16[6])": EventFragment;
    "UpdateItemPrice(uint256,uint256)": EventFragment;
    "UpdateWearableSet(uint256,tuple)": EventFragment;
    "WearableSlotPositionsSet(uint256,bool[16])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateralType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddCollateralType(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddItemType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddItemType(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWearableSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWearableSet(tuple)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateHaunt"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreateHaunt(uint256,uint256,uint256,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DaoTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoTreasuryTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DaoTreasuryTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameManagerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GameManagerAdded(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameManagerRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GameManagerRemoved(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantExperience"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GrantExperience(uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemManagerAdded(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemManagerRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ItemManagerRemoved(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemModifiersSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ItemModifiersSet(uint256,int8[6],uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTypeMaxQuantity"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ItemTypeMaxQuantity(uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveExperience"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveExperience(uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCollateralModifiers"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateCollateralModifiers(int16[6],int16[6])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateItemPrice"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateItemPrice(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWearableSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateWearableSet(uint256,tuple)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WearableSlotPositionsSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WearableSlotPositionsSet(uint256,bool[16])"
  ): EventFragment;
}

export interface AddCollateralTypeEventObject {
  _collateralType: AavegotchiCollateralTypeIOStructOutput;
}
export type AddCollateralTypeEvent = TypedEvent<
  [AavegotchiCollateralTypeIOStructOutput],
  AddCollateralTypeEventObject
>;

export type AddCollateralTypeEventFilter =
  TypedEventFilter<AddCollateralTypeEvent>;

export interface AddItemTypeEventObject {
  _itemType: ItemTypeStructOutput;
}
export type AddItemTypeEvent = TypedEvent<
  [ItemTypeStructOutput],
  AddItemTypeEventObject
>;

export type AddItemTypeEventFilter = TypedEventFilter<AddItemTypeEvent>;

export interface AddWearableSetEventObject {
  _wearableSet: WearableSetStructOutput;
}
export type AddWearableSetEvent = TypedEvent<
  [WearableSetStructOutput],
  AddWearableSetEventObject
>;

export type AddWearableSetEventFilter = TypedEventFilter<AddWearableSetEvent>;

export interface CreateHauntEventObject {
  _hauntId: BigNumber;
  _hauntMaxSize: BigNumber;
  _portalPrice: BigNumber;
  _bodyColor: string;
}
export type CreateHauntEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  CreateHauntEventObject
>;

export type CreateHauntEventFilter = TypedEventFilter<CreateHauntEvent>;

export interface DaoTransferredEventObject {
  previousDao: string;
  newDao: string;
}
export type DaoTransferredEvent = TypedEvent<
  [string, string],
  DaoTransferredEventObject
>;

export type DaoTransferredEventFilter = TypedEventFilter<DaoTransferredEvent>;

export interface DaoTreasuryTransferredEventObject {
  previousDaoTreasury: string;
  newDaoTreasury: string;
}
export type DaoTreasuryTransferredEvent = TypedEvent<
  [string, string],
  DaoTreasuryTransferredEventObject
>;

export type DaoTreasuryTransferredEventFilter =
  TypedEventFilter<DaoTreasuryTransferredEvent>;

export interface GameManagerAddedEventObject {
  gameManager_: string;
  limit_: BigNumber;
  refreshTime_: BigNumber;
}
export type GameManagerAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GameManagerAddedEventObject
>;

export type GameManagerAddedEventFilter =
  TypedEventFilter<GameManagerAddedEvent>;

export interface GameManagerRemovedEventObject {
  gameManager_: string;
}
export type GameManagerRemovedEvent = TypedEvent<
  [string],
  GameManagerRemovedEventObject
>;

export type GameManagerRemovedEventFilter =
  TypedEventFilter<GameManagerRemovedEvent>;

export interface GrantExperienceEventObject {
  _tokenIds: BigNumber[];
  _xpValues: BigNumber[];
}
export type GrantExperienceEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  GrantExperienceEventObject
>;

export type GrantExperienceEventFilter = TypedEventFilter<GrantExperienceEvent>;

export interface ItemManagerAddedEventObject {
  newItemManager_: string;
}
export type ItemManagerAddedEvent = TypedEvent<
  [string],
  ItemManagerAddedEventObject
>;

export type ItemManagerAddedEventFilter =
  TypedEventFilter<ItemManagerAddedEvent>;

export interface ItemManagerRemovedEventObject {
  itemManager_: string;
}
export type ItemManagerRemovedEvent = TypedEvent<
  [string],
  ItemManagerRemovedEventObject
>;

export type ItemManagerRemovedEventFilter =
  TypedEventFilter<ItemManagerRemovedEvent>;

export interface ItemModifiersSetEventObject {
  _wearableId: BigNumber;
  _traitModifiers: number[];
  _rarityScoreModifier: number;
}
export type ItemModifiersSetEvent = TypedEvent<
  [BigNumber, number[], number],
  ItemModifiersSetEventObject
>;

export type ItemModifiersSetEventFilter =
  TypedEventFilter<ItemModifiersSetEvent>;

export interface ItemTypeMaxQuantityEventObject {
  _itemIds: BigNumber[];
  _maxQuanities: BigNumber[];
}
export type ItemTypeMaxQuantityEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  ItemTypeMaxQuantityEventObject
>;

export type ItemTypeMaxQuantityEventFilter =
  TypedEventFilter<ItemTypeMaxQuantityEvent>;

export interface RemoveExperienceEventObject {
  _tokenIds: BigNumber[];
  _xpValues: BigNumber[];
}
export type RemoveExperienceEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  RemoveExperienceEventObject
>;

export type RemoveExperienceEventFilter =
  TypedEventFilter<RemoveExperienceEvent>;

export interface UpdateCollateralModifiersEventObject {
  _oldModifiers: number[];
  _newModifiers: number[];
}
export type UpdateCollateralModifiersEvent = TypedEvent<
  [number[], number[]],
  UpdateCollateralModifiersEventObject
>;

export type UpdateCollateralModifiersEventFilter =
  TypedEventFilter<UpdateCollateralModifiersEvent>;

export interface UpdateItemPriceEventObject {
  _itemId: BigNumber;
  _priceInWei: BigNumber;
}
export type UpdateItemPriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateItemPriceEventObject
>;

export type UpdateItemPriceEventFilter = TypedEventFilter<UpdateItemPriceEvent>;

export interface UpdateWearableSetEventObject {
  _setId: BigNumber;
  _wearableSet: WearableSetStructOutput;
}
export type UpdateWearableSetEvent = TypedEvent<
  [BigNumber, WearableSetStructOutput],
  UpdateWearableSetEventObject
>;

export type UpdateWearableSetEventFilter =
  TypedEventFilter<UpdateWearableSetEvent>;

export interface WearableSlotPositionsSetEventObject {
  _wearableId: BigNumber;
  _slotPositions: boolean[];
}
export type WearableSlotPositionsSetEvent = TypedEvent<
  [BigNumber, boolean[]],
  WearableSlotPositionsSetEventObject
>;

export type WearableSlotPositionsSetEventFilter =
  TypedEventFilter<WearableSlotPositionsSetEvent>;

export interface DAOFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateralTypes(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addGameManagers(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addGameManagers(address[],uint256[])"(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addItemManagers(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addItemManagers(address[])"(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addItemTypes(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addItemTypesAndSvgs(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWearableSets(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addWearableSets((string,uint8[],uint16[],int8[5])[])"(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchUpdateItemsPrice(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchUpdateItemsPrice(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createHaunt(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createHaunt(uint24,uint96,bytes3)"(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createHauntWithPayload(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameManagerBalance(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "gameManagerBalance(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gameManagerRefreshTime(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "gameManagerRefreshTime(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGameManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isGameManager(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintItems(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintItems(address,uint256[],uint256[])"(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeGameManagers(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeGameManagers(address[])"(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeItemManagers(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeItemManagers(address[])"(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDao(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDao(address,address)"(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWearableSlotPositions(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setWearableSlotPositions(uint256,bool[16])"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCollateralModifiers(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateCollateralModifiers(address,int16[6])"(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateItemTypeMaxQuantity(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWearableSets(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateralTypes(
    _hauntId: PromiseOrValue<BigNumberish>,
    _collateralTypes: AavegotchiCollateralTypeIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"(
    _hauntId: PromiseOrValue<BigNumberish>,
    _collateralTypes: AavegotchiCollateralTypeIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addGameManagers(
    _newGameManagers: PromiseOrValue<string>[],
    _limits: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addGameManagers(address[],uint256[])"(
    _newGameManagers: PromiseOrValue<string>[],
    _limits: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addItemManagers(
    _newItemManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addItemManagers(address[])"(
    _newItemManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addItemTypes(
    _itemTypes: ItemTypeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"(
    _itemTypes: ItemTypeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addItemTypesAndSvgs(
    _itemTypes: ItemTypeStruct[],
    _svg: PromiseOrValue<string>,
    _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"(
    _itemTypes: ItemTypeStruct[],
    _svg: PromiseOrValue<string>,
    _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWearableSets(
    _wearableSets: WearableSetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addWearableSets((string,uint8[],uint16[],int8[5])[])"(
    _wearableSets: WearableSetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchUpdateItemsPrice(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _newPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchUpdateItemsPrice(uint256[],uint256[])"(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _newPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createHaunt(
    _hauntMaxSize: PromiseOrValue<BigNumberish>,
    _portalPrice: PromiseOrValue<BigNumberish>,
    _bodyColor: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createHaunt(uint24,uint96,bytes3)"(
    _hauntMaxSize: PromiseOrValue<BigNumberish>,
    _portalPrice: PromiseOrValue<BigNumberish>,
    _bodyColor: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createHauntWithPayload(
    _payload: DAOFacet.CreateHauntPayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"(
    _payload: DAOFacet.CreateHauntPayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameManagerBalance(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "gameManagerBalance(address)"(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gameManagerRefreshTime(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "gameManagerRefreshTime(address)"(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantExperience(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _xpValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantExperience(uint256[],uint256[])"(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _xpValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGameManager(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGameManager(address)"(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintItems(
    _to: PromiseOrValue<string>,
    _itemIds: PromiseOrValue<BigNumberish>[],
    _quantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintItems(address,uint256[],uint256[])"(
    _to: PromiseOrValue<string>,
    _itemIds: PromiseOrValue<BigNumberish>[],
    _quantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeExperience(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _xpValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeExperience(uint256[],uint256[])"(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _xpValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeGameManagers(
    _gameManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeGameManagers(address[])"(
    _gameManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeItemManagers(
    _itemManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeItemManagers(address[])"(
    _itemManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDao(
    _newDao: PromiseOrValue<string>,
    _newDaoTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDao(address,address)"(
    _newDao: PromiseOrValue<string>,
    _newDaoTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setItemTraitModifiersAndRarityModifier(
    _wearableId: PromiseOrValue<BigNumberish>,
    _traitModifiers: PromiseOrValue<BigNumberish>[],
    _rarityScoreModifier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"(
    _wearableId: PromiseOrValue<BigNumberish>,
    _traitModifiers: PromiseOrValue<BigNumberish>[],
    _rarityScoreModifier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWearableSlotPositions(
    _wearableId: PromiseOrValue<BigNumberish>,
    _slotPositions: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setWearableSlotPositions(uint256,bool[16])"(
    _wearableId: PromiseOrValue<BigNumberish>,
    _slotPositions: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCollateralModifiers(
    _collateralType: PromiseOrValue<string>,
    _modifiers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateCollateralModifiers(address,int16[6])"(
    _collateralType: PromiseOrValue<string>,
    _modifiers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateItemTypeMaxQuantity(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _maxQuantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateItemTypeMaxQuantity(uint256[],uint256[])"(
    _itemIds: PromiseOrValue<BigNumberish>[],
    _maxQuantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWearableSets(
    _setIds: PromiseOrValue<BigNumberish>[],
    _wearableSets: WearableSetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"(
    _setIds: PromiseOrValue<BigNumberish>[],
    _wearableSets: WearableSetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateralTypes(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addGameManagers(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addGameManagers(address[],uint256[])"(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemManagers(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addItemManagers(address[])"(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemTypes(
      _itemTypes: ItemTypeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"(
      _itemTypes: ItemTypeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addItemTypesAndSvgs(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addWearableSets(
      _wearableSets: WearableSetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addWearableSets((string,uint8[],uint16[],int8[5])[])"(
      _wearableSets: WearableSetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUpdateItemsPrice(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchUpdateItemsPrice(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createHaunt(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createHaunt(uint24,uint96,bytes3)"(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createHauntWithPayload(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerBalance(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gameManagerBalance(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerRefreshTime(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gameManagerRefreshTime(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "grantExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isGameManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGameManager(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintItems(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintItems(address,uint256[],uint256[])"(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeGameManagers(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGameManagers(address[])"(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeItemManagers(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeItemManagers(address[])"(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDao(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDao(address,address)"(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWearableSlotPositions(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setWearableSlotPositions(uint256,bool[16])"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralModifiers(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCollateralModifiers(address,int16[6])"(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateItemTypeMaxQuantity(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWearableSets(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddCollateralType(tuple)"(
      _collateralType?: null
    ): AddCollateralTypeEventFilter;
    AddCollateralType(_collateralType?: null): AddCollateralTypeEventFilter;

    "AddItemType(tuple)"(_itemType?: null): AddItemTypeEventFilter;
    AddItemType(_itemType?: null): AddItemTypeEventFilter;

    "AddWearableSet(tuple)"(_wearableSet?: null): AddWearableSetEventFilter;
    AddWearableSet(_wearableSet?: null): AddWearableSetEventFilter;

    "CreateHaunt(uint256,uint256,uint256,bytes32)"(
      _hauntId?: PromiseOrValue<BigNumberish> | null,
      _hauntMaxSize?: null,
      _portalPrice?: null,
      _bodyColor?: null
    ): CreateHauntEventFilter;
    CreateHaunt(
      _hauntId?: PromiseOrValue<BigNumberish> | null,
      _hauntMaxSize?: null,
      _portalPrice?: null,
      _bodyColor?: null
    ): CreateHauntEventFilter;

    "DaoTransferred(address,address)"(
      previousDao?: PromiseOrValue<string> | null,
      newDao?: PromiseOrValue<string> | null
    ): DaoTransferredEventFilter;
    DaoTransferred(
      previousDao?: PromiseOrValue<string> | null,
      newDao?: PromiseOrValue<string> | null
    ): DaoTransferredEventFilter;

    "DaoTreasuryTransferred(address,address)"(
      previousDaoTreasury?: PromiseOrValue<string> | null,
      newDaoTreasury?: PromiseOrValue<string> | null
    ): DaoTreasuryTransferredEventFilter;
    DaoTreasuryTransferred(
      previousDaoTreasury?: PromiseOrValue<string> | null,
      newDaoTreasury?: PromiseOrValue<string> | null
    ): DaoTreasuryTransferredEventFilter;

    "GameManagerAdded(address,uint256,uint256)"(
      gameManager_?: PromiseOrValue<string> | null,
      limit_?: PromiseOrValue<BigNumberish> | null,
      refreshTime_?: null
    ): GameManagerAddedEventFilter;
    GameManagerAdded(
      gameManager_?: PromiseOrValue<string> | null,
      limit_?: PromiseOrValue<BigNumberish> | null,
      refreshTime_?: null
    ): GameManagerAddedEventFilter;

    "GameManagerRemoved(address)"(
      gameManager_?: PromiseOrValue<string> | null
    ): GameManagerRemovedEventFilter;
    GameManagerRemoved(
      gameManager_?: PromiseOrValue<string> | null
    ): GameManagerRemovedEventFilter;

    "GrantExperience(uint256[],uint256[])"(
      _tokenIds?: null,
      _xpValues?: null
    ): GrantExperienceEventFilter;
    GrantExperience(
      _tokenIds?: null,
      _xpValues?: null
    ): GrantExperienceEventFilter;

    "ItemManagerAdded(address)"(
      newItemManager_?: PromiseOrValue<string> | null
    ): ItemManagerAddedEventFilter;
    ItemManagerAdded(
      newItemManager_?: PromiseOrValue<string> | null
    ): ItemManagerAddedEventFilter;

    "ItemManagerRemoved(address)"(
      itemManager_?: PromiseOrValue<string> | null
    ): ItemManagerRemovedEventFilter;
    ItemManagerRemoved(
      itemManager_?: PromiseOrValue<string> | null
    ): ItemManagerRemovedEventFilter;

    "ItemModifiersSet(uint256,int8[6],uint8)"(
      _wearableId?: null,
      _traitModifiers?: null,
      _rarityScoreModifier?: null
    ): ItemModifiersSetEventFilter;
    ItemModifiersSet(
      _wearableId?: null,
      _traitModifiers?: null,
      _rarityScoreModifier?: null
    ): ItemModifiersSetEventFilter;

    "ItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds?: null,
      _maxQuanities?: null
    ): ItemTypeMaxQuantityEventFilter;
    ItemTypeMaxQuantity(
      _itemIds?: null,
      _maxQuanities?: null
    ): ItemTypeMaxQuantityEventFilter;

    "RemoveExperience(uint256[],uint256[])"(
      _tokenIds?: null,
      _xpValues?: null
    ): RemoveExperienceEventFilter;
    RemoveExperience(
      _tokenIds?: null,
      _xpValues?: null
    ): RemoveExperienceEventFilter;

    "UpdateCollateralModifiers(int16[6],int16[6])"(
      _oldModifiers?: null,
      _newModifiers?: null
    ): UpdateCollateralModifiersEventFilter;
    UpdateCollateralModifiers(
      _oldModifiers?: null,
      _newModifiers?: null
    ): UpdateCollateralModifiersEventFilter;

    "UpdateItemPrice(uint256,uint256)"(
      _itemId?: null,
      _priceInWei?: null
    ): UpdateItemPriceEventFilter;
    UpdateItemPrice(
      _itemId?: null,
      _priceInWei?: null
    ): UpdateItemPriceEventFilter;

    "UpdateWearableSet(uint256,tuple)"(
      _setId?: null,
      _wearableSet?: null
    ): UpdateWearableSetEventFilter;
    UpdateWearableSet(
      _setId?: null,
      _wearableSet?: null
    ): UpdateWearableSetEventFilter;

    "WearableSlotPositionsSet(uint256,bool[16])"(
      _wearableId?: null,
      _slotPositions?: null
    ): WearableSlotPositionsSetEventFilter;
    WearableSlotPositionsSet(
      _wearableId?: null,
      _slotPositions?: null
    ): WearableSlotPositionsSetEventFilter;
  };

  estimateGas: {
    addCollateralTypes(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addGameManagers(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addGameManagers(address[],uint256[])"(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addItemManagers(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addItemManagers(address[])"(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addItemTypes(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addItemTypesAndSvgs(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWearableSets(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addWearableSets((string,uint8[],uint16[],int8[5])[])"(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchUpdateItemsPrice(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchUpdateItemsPrice(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createHaunt(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createHaunt(uint24,uint96,bytes3)"(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createHauntWithPayload(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameManagerBalance(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gameManagerBalance(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameManagerRefreshTime(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gameManagerRefreshTime(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGameManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGameManager(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintItems(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintItems(address,uint256[],uint256[])"(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeGameManagers(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeGameManagers(address[])"(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeItemManagers(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeItemManagers(address[])"(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDao(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDao(address,address)"(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWearableSlotPositions(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setWearableSlotPositions(uint256,bool[16])"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCollateralModifiers(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateCollateralModifiers(address,int16[6])"(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateItemTypeMaxQuantity(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWearableSets(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralTypes(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addCollateralTypes(uint256,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[])"(
      _hauntId: PromiseOrValue<BigNumberish>,
      _collateralTypes: AavegotchiCollateralTypeIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addGameManagers(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addGameManagers(address[],uint256[])"(
      _newGameManagers: PromiseOrValue<string>[],
      _limits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addItemManagers(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addItemManagers(address[])"(
      _newItemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addItemTypes(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addItemTypes((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[])"(
      _itemTypes: ItemTypeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addItemTypesAndSvgs(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addItemTypesAndSvgs((string,string,string,int8[6],bool[16],uint8[],(uint8,uint8,uint8,uint8),uint256,uint256,uint256,uint32,uint8,bool,uint16,bool,uint8,int16,uint32)[],string,(bytes32,uint256[])[])"(
      _itemTypes: ItemTypeStruct[],
      _svg: PromiseOrValue<string>,
      _typesAndSizes: LibSvg.SvgTypeAndSizesStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWearableSets(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addWearableSets((string,uint8[],uint16[],int8[5])[])"(
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchUpdateItemsPrice(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchUpdateItemsPrice(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createHaunt(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createHaunt(uint24,uint96,bytes3)"(
      _hauntMaxSize: PromiseOrValue<BigNumberish>,
      _portalPrice: PromiseOrValue<BigNumberish>,
      _bodyColor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createHauntWithPayload(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createHauntWithPayload((uint24,uint96,bytes3,(address,(int16[6],bytes3,bytes3,bytes3,uint8,uint8,uint16,bool))[],string,(bytes32,uint256[])[],string,(bytes32,uint256[])[]))"(
      _payload: DAOFacet.CreateHauntPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameManagerBalance(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gameManagerBalance(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameManagerRefreshTime(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gameManagerRefreshTime(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGameManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGameManager(address)"(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintItems(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintItems(address,uint256[],uint256[])"(
      _to: PromiseOrValue<string>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeExperience(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeExperience(uint256[],uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _xpValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeGameManagers(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeGameManagers(address[])"(
      _gameManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeItemManagers(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeItemManagers(address[])"(
      _itemManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDao(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDao(address,address)"(
      _newDao: PromiseOrValue<string>,
      _newDaoTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setItemTraitModifiersAndRarityModifier(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setItemTraitModifiersAndRarityModifier(uint256,int8[6],uint8)"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _traitModifiers: PromiseOrValue<BigNumberish>[],
      _rarityScoreModifier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWearableSlotPositions(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setWearableSlotPositions(uint256,bool[16])"(
      _wearableId: PromiseOrValue<BigNumberish>,
      _slotPositions: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralModifiers(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateCollateralModifiers(address,int16[6])"(
      _collateralType: PromiseOrValue<string>,
      _modifiers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateItemTypeMaxQuantity(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateItemTypeMaxQuantity(uint256[],uint256[])"(
      _itemIds: PromiseOrValue<BigNumberish>[],
      _maxQuantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWearableSets(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateWearableSets(uint256[],(string,uint8[],uint16[],int8[5])[])"(
      _setIds: PromiseOrValue<BigNumberish>[],
      _wearableSets: WearableSetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
