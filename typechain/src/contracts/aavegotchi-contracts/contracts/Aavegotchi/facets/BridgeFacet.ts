/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface BridgeFacetInterface extends utils.Interface {
  functions: {
    "childChainManager()": FunctionFragment;
    "deposit(address,bytes)": FunctionFragment;
    "setChildChainManager(address)": FunctionFragment;
    "withdrawAavegotchiBatch(uint256[])": FunctionFragment;
    "withdrawItemsBatch(uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "childChainManager"
      | "childChainManager()"
      | "deposit"
      | "deposit(address,bytes)"
      | "setChildChainManager"
      | "setChildChainManager(address)"
      | "withdrawAavegotchiBatch"
      | "withdrawAavegotchiBatch(uint256[])"
      | "withdrawItemsBatch"
      | "withdrawItemsBatch(uint256[],uint256[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "childChainManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childChainManager()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildChainManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildChainManager(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAavegotchiBatch",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAavegotchiBatch(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsBatch",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsBatch(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "childChainManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childChainManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildChainManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildChainManager(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAavegotchiBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAavegotchiBatch(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsBatch(uint256[],uint256[])",
    data: BytesLike
  ): Result;

  events: {
    "AddedAavegotchiBatch(address,uint256[])": EventFragment;
    "AddedItemsBatch(address,uint256[],uint256[])": EventFragment;
    "WithdrawnBatch(address,uint256[])": EventFragment;
    "WithdrawnItems(address,uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedAavegotchiBatch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddedAavegotchiBatch(address,uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedItemsBatch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddedItemsBatch(address,uint256[],uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnBatch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnBatch(address,uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnItems"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawnItems(address,uint256[],uint256[])"
  ): EventFragment;
}

export interface AddedAavegotchiBatchEventObject {
  owner: string;
  tokenIds: BigNumber[];
}
export type AddedAavegotchiBatchEvent = TypedEvent<
  [string, BigNumber[]],
  AddedAavegotchiBatchEventObject
>;

export type AddedAavegotchiBatchEventFilter =
  TypedEventFilter<AddedAavegotchiBatchEvent>;

export interface AddedItemsBatchEventObject {
  owner: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type AddedItemsBatchEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]],
  AddedItemsBatchEventObject
>;

export type AddedItemsBatchEventFilter = TypedEventFilter<AddedItemsBatchEvent>;

export interface WithdrawnBatchEventObject {
  owner: string;
  tokenIds: BigNumber[];
}
export type WithdrawnBatchEvent = TypedEvent<
  [string, BigNumber[]],
  WithdrawnBatchEventObject
>;

export type WithdrawnBatchEventFilter = TypedEventFilter<WithdrawnBatchEvent>;

export interface WithdrawnItemsEventObject {
  owner: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type WithdrawnItemsEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]],
  WithdrawnItemsEventObject
>;

export type WithdrawnItemsEventFilter = TypedEventFilter<WithdrawnItemsEvent>;

export interface BridgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    childChainManager(overrides?: CallOverrides): Promise<[string]>;

    "childChainManager()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,bytes)"(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChildChainManager(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setChildChainManager(address)"(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAavegotchiBatch(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawAavegotchiBatch(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawItemsBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawItemsBatch(uint256[],uint256[])"(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  childChainManager(overrides?: CallOverrides): Promise<string>;

  "childChainManager()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _user: PromiseOrValue<string>,
    _depositData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,bytes)"(
    _user: PromiseOrValue<string>,
    _depositData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChildChainManager(
    _newChildChainManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setChildChainManager(address)"(
    _newChildChainManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAavegotchiBatch(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawAavegotchiBatch(uint256[])"(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawItemsBatch(
    _ids: PromiseOrValue<BigNumberish>[],
    _values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawItemsBatch(uint256[],uint256[])"(
    _ids: PromiseOrValue<BigNumberish>[],
    _values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    childChainManager(overrides?: CallOverrides): Promise<string>;

    "childChainManager()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,bytes)"(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildChainManager(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChildChainManager(address)"(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAavegotchiBatch(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAavegotchiBatch(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawItemsBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawItemsBatch(uint256[],uint256[])"(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedAavegotchiBatch(address,uint256[])"(
      owner?: PromiseOrValue<string> | null,
      tokenIds?: null
    ): AddedAavegotchiBatchEventFilter;
    AddedAavegotchiBatch(
      owner?: PromiseOrValue<string> | null,
      tokenIds?: null
    ): AddedAavegotchiBatchEventFilter;

    "AddedItemsBatch(address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): AddedItemsBatchEventFilter;
    AddedItemsBatch(
      owner?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): AddedItemsBatchEventFilter;

    "WithdrawnBatch(address,uint256[])"(
      owner?: PromiseOrValue<string> | null,
      tokenIds?: null
    ): WithdrawnBatchEventFilter;
    WithdrawnBatch(
      owner?: PromiseOrValue<string> | null,
      tokenIds?: null
    ): WithdrawnBatchEventFilter;

    "WithdrawnItems(address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): WithdrawnItemsEventFilter;
    WithdrawnItems(
      owner?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): WithdrawnItemsEventFilter;
  };

  estimateGas: {
    childChainManager(overrides?: CallOverrides): Promise<BigNumber>;

    "childChainManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(address,bytes)"(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChildChainManager(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setChildChainManager(address)"(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAavegotchiBatch(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawAavegotchiBatch(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawItemsBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawItemsBatch(uint256[],uint256[])"(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    childChainManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "childChainManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,bytes)"(
      _user: PromiseOrValue<string>,
      _depositData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChildChainManager(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setChildChainManager(address)"(
      _newChildChainManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAavegotchiBatch(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAavegotchiBatch(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawItemsBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawItemsBatch(uint256[],uint256[])"(
      _ids: PromiseOrValue<BigNumberish>[],
      _values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
