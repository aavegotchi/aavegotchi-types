/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type WearableSetStruct = {
  name: PromiseOrValue<string>;
  allowedCollaterals: PromiseOrValue<BigNumberish>[];
  wearableIds: PromiseOrValue<BigNumberish>[];
  traitsBonuses: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
};

export type WearableSetStructOutput = [
  string,
  number[],
  number[],
  [number, number, number, number, number]
] & {
  name: string;
  allowedCollaterals: number[];
  wearableIds: number[];
  traitsBonuses: [number, number, number, number, number];
};

export interface WearableSetsFacetInterface extends utils.Interface {
  functions: {
    "findWearableSets(uint256[])": FunctionFragment;
    "getWearableSet(uint256)": FunctionFragment;
    "getWearableSets()": FunctionFragment;
    "totalWearableSets()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "findWearableSets"
      | "findWearableSets(uint256[])"
      | "getWearableSet"
      | "getWearableSet(uint256)"
      | "getWearableSets"
      | "getWearableSets()"
      | "totalWearableSets"
      | "totalWearableSets()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findWearableSets",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findWearableSets(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSet(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWearableSets()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "findWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findWearableSets(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSet(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWearableSets()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface WearableSetsFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WearableSetsFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { wearableSetIds_: BigNumber[] }>;

    "findWearableSets(uint256[])"(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { wearableSetIds_: BigNumber[] }>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput] & { wearableSet_: WearableSetStructOutput }
    >;

    "getWearableSet(uint256)"(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput] & { wearableSet_: WearableSetStructOutput }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput[]] & { wearableSets_: WearableSetStructOutput[] }
    >;

    "getWearableSets()"(
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput[]] & { wearableSets_: WearableSetStructOutput[] }
    >;

    totalWearableSets(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalWearableSets()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  findWearableSets(
    _wearableIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "findWearableSets(uint256[])"(
    _wearableIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getWearableSet(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput>;

  "getWearableSet(uint256)"(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput>;

  getWearableSets(
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput[]>;

  "getWearableSets()"(
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput[]>;

  totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

  "totalWearableSets()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "findWearableSets(uint256[])"(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput>;

    "getWearableSet(uint256)"(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput>;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput[]>;

    "getWearableSets()"(
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput[]>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalWearableSets()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findWearableSets(uint256[])"(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWearableSet(uint256)"(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    "getWearableSets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalWearableSets()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findWearableSets(uint256[])"(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWearableSet(uint256)"(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWearableSets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalWearableSets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
