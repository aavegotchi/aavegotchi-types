/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export type HauntStruct = {
  hauntMaxSize: PromiseOrValue<BigNumberish>;
  portalPrice: PromiseOrValue<BigNumberish>;
  bodyColor: PromiseOrValue<BytesLike>;
  totalCount: PromiseOrValue<BigNumberish>;
};

export type HauntStructOutput = [BigNumber, BigNumber, string, number] & {
  hauntMaxSize: BigNumber;
  portalPrice: BigNumber;
  bodyColor: string;
  totalCount: number;
};

export type PortalAavegotchiTraitsIOStruct = {
  randomNumber: PromiseOrValue<BigNumberish>;
  numericTraits: PromiseOrValue<BigNumberish>[];
  collateralType: PromiseOrValue<string>;
  minimumStake: PromiseOrValue<BigNumberish>;
};

export type PortalAavegotchiTraitsIOStructOutput = [
  BigNumber,
  number[],
  string,
  BigNumber
] & {
  randomNumber: BigNumber;
  numericTraits: number[];
  collateralType: string;
  minimumStake: BigNumber;
};

export declare namespace AavegotchiGameFacet {
  export type RevenueSharesIOStruct = {
    burnAddress: PromiseOrValue<string>;
    daoAddress: PromiseOrValue<string>;
    rarityFarming: PromiseOrValue<string>;
    pixelCraft: PromiseOrValue<string>;
  };

  export type RevenueSharesIOStructOutput = [string, string, string, string] & {
    burnAddress: string;
    daoAddress: string;
    rarityFarming: string;
    pixelCraft: string;
  };

  export type TokenIdsWithKinshipStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    kinship: PromiseOrValue<BigNumberish>;
    lastInteracted: PromiseOrValue<BigNumberish>;
  };

  export type TokenIdsWithKinshipStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { tokenId: BigNumber; kinship: BigNumber; lastInteracted: BigNumber };
}

export interface AavegotchiGameFacetInterface extends utils.Interface {
  functions: {
    "aavegotchiLevel(uint256)": FunctionFragment;
    "aavegotchiNameAvailable(string)": FunctionFragment;
    "availableSkillPoints(uint256)": FunctionFragment;
    "baseRarityScore(int16[6])": FunctionFragment;
    "claimAavegotchi(uint256,uint256,uint256)": FunctionFragment;
    "currentHaunt()": FunctionFragment;
    "getNumericTraits(uint256)": FunctionFragment;
    "ghstAddress()": FunctionFragment;
    "interact(uint256[])": FunctionFragment;
    "kinship(uint256)": FunctionFragment;
    "modifiedTraitsAndRarityScore(uint256)": FunctionFragment;
    "portalAavegotchiTraits(uint256)": FunctionFragment;
    "rarityMultiplier(int16[6])": FunctionFragment;
    "realmInteract(uint256)": FunctionFragment;
    "revenueShares()": FunctionFragment;
    "setAavegotchiName(uint256,string)": FunctionFragment;
    "setRealmAddress(address)": FunctionFragment;
    "spendSkillPoints(uint256,int16[4])": FunctionFragment;
    "tokenIdsWithKinship(address,uint256,uint256,bool)": FunctionFragment;
    "xpUntilNextLevel(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aavegotchiLevel"
      | "aavegotchiLevel(uint256)"
      | "aavegotchiNameAvailable"
      | "aavegotchiNameAvailable(string)"
      | "availableSkillPoints"
      | "availableSkillPoints(uint256)"
      | "baseRarityScore"
      | "baseRarityScore(int16[6])"
      | "claimAavegotchi"
      | "claimAavegotchi(uint256,uint256,uint256)"
      | "currentHaunt"
      | "currentHaunt()"
      | "getNumericTraits"
      | "getNumericTraits(uint256)"
      | "ghstAddress"
      | "ghstAddress()"
      | "interact"
      | "interact(uint256[])"
      | "kinship"
      | "kinship(uint256)"
      | "modifiedTraitsAndRarityScore"
      | "modifiedTraitsAndRarityScore(uint256)"
      | "portalAavegotchiTraits"
      | "portalAavegotchiTraits(uint256)"
      | "rarityMultiplier"
      | "rarityMultiplier(int16[6])"
      | "realmInteract"
      | "realmInteract(uint256)"
      | "revenueShares"
      | "revenueShares()"
      | "setAavegotchiName"
      | "setAavegotchiName(uint256,string)"
      | "setRealmAddress"
      | "setRealmAddress(address)"
      | "spendSkillPoints"
      | "spendSkillPoints(uint256,int16[4])"
      | "tokenIdsWithKinship"
      | "tokenIdsWithKinship(address,uint256,uint256,bool)"
      | "xpUntilNextLevel"
      | "xpUntilNextLevel(uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aavegotchiLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aavegotchiLevel(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aavegotchiNameAvailable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aavegotchiNameAvailable(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableSkillPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableSkillPoints(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRarityScore",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRarityScore(int16[6])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAavegotchi",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAavegotchi(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentHaunt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentHaunt()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumericTraits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumericTraits(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ghstAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ghstAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interact",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "interact(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "kinship",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "kinship(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifiedTraitsAndRarityScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifiedTraitsAndRarityScore(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "portalAavegotchiTraits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "portalAavegotchiTraits(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityMultiplier",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityMultiplier(int16[6])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmInteract",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmInteract(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueShares()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAavegotchiName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAavegotchiName(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendSkillPoints",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spendSkillPoints(uint256,int16[4])",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsWithKinship",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsWithKinship(address,uint256,uint256,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xpUntilNextLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "xpUntilNextLevel(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aavegotchiLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aavegotchiLevel(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aavegotchiNameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aavegotchiNameAvailable(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableSkillPoints(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRarityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRarityScore(int16[6])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAavegotchi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAavegotchi(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentHaunt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentHaunt()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumericTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumericTraits(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ghstAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ghstAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interact(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kinship", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kinship(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifiedTraitsAndRarityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifiedTraitsAndRarityScore(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "portalAavegotchiTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "portalAavegotchiTraits(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rarityMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rarityMultiplier(int16[6])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmInteract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmInteract(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueShares()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavegotchiName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavegotchiName(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendSkillPoints(uint256,int16[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsWithKinship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsWithKinship(address,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xpUntilNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xpUntilNextLevel(uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ClaimAavegotchi(uint256)": EventFragment;
    "LockAavegotchi(uint256,uint256)": EventFragment;
    "SetAavegotchiName(uint256,string,string)": EventFragment;
    "SetBatchId(uint256,uint256[])": EventFragment;
    "SpendSkillpoints(uint256,int16[4])": EventFragment;
    "UnLockAavegotchi(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimAavegotchi"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimAavegotchi(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockAavegotchi"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockAavegotchi(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAavegotchiName"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAavegotchiName(uint256,string,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBatchId"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBatchId(uint256,uint256[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpendSkillpoints"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SpendSkillpoints(uint256,int16[4])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnLockAavegotchi"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UnLockAavegotchi(uint256,uint256)"
  ): EventFragment;
}

export interface ClaimAavegotchiEventObject {
  _tokenId: BigNumber;
}
export type ClaimAavegotchiEvent = TypedEvent<
  [BigNumber],
  ClaimAavegotchiEventObject
>;

export type ClaimAavegotchiEventFilter = TypedEventFilter<ClaimAavegotchiEvent>;

export interface LockAavegotchiEventObject {
  _tokenId: BigNumber;
  _time: BigNumber;
}
export type LockAavegotchiEvent = TypedEvent<
  [BigNumber, BigNumber],
  LockAavegotchiEventObject
>;

export type LockAavegotchiEventFilter = TypedEventFilter<LockAavegotchiEvent>;

export interface SetAavegotchiNameEventObject {
  _tokenId: BigNumber;
  _oldName: string;
  _newName: string;
}
export type SetAavegotchiNameEvent = TypedEvent<
  [BigNumber, string, string],
  SetAavegotchiNameEventObject
>;

export type SetAavegotchiNameEventFilter =
  TypedEventFilter<SetAavegotchiNameEvent>;

export interface SetBatchIdEventObject {
  _batchId: BigNumber;
  tokenIds: BigNumber[];
}
export type SetBatchIdEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  SetBatchIdEventObject
>;

export type SetBatchIdEventFilter = TypedEventFilter<SetBatchIdEvent>;

export interface SpendSkillpointsEventObject {
  _tokenId: BigNumber;
  _values: [number, number, number, number];
}
export type SpendSkillpointsEvent = TypedEvent<
  [BigNumber, [number, number, number, number]],
  SpendSkillpointsEventObject
>;

export type SpendSkillpointsEventFilter =
  TypedEventFilter<SpendSkillpointsEvent>;

export interface UnLockAavegotchiEventObject {
  _tokenId: BigNumber;
  _time: BigNumber;
}
export type UnLockAavegotchiEvent = TypedEvent<
  [BigNumber, BigNumber],
  UnLockAavegotchiEventObject
>;

export type UnLockAavegotchiEventFilter =
  TypedEventFilter<UnLockAavegotchiEvent>;

export interface AavegotchiGameFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AavegotchiGameFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aavegotchiLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { level_: BigNumber }>;

    "aavegotchiLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { level_: BigNumber }>;

    aavegotchiNameAvailable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available_: boolean }>;

    "aavegotchiNameAvailable(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available_: boolean }>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "availableSkillPoints(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseRarityScore(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rarityScore_: BigNumber }>;

    "baseRarityScore(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rarityScore_: BigNumber }>;

    claimAavegotchi(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimAavegotchi(uint256,uint256,uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentHaunt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, HauntStructOutput] & {
        hauntId_: BigNumber;
        haunt_: HauntStructOutput;
      }
    >;

    "currentHaunt()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, HauntStructOutput] & {
        hauntId_: BigNumber;
        haunt_: HauntStructOutput;
      }
    >;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { numericTraits_: number[] }>;

    "getNumericTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { numericTraits_: number[] }>;

    ghstAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    "ghstAddress()"(
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    interact(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "interact(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kinship(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { score_: BigNumber }>;

    "kinship(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { score_: BigNumber }>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    "modifiedTraitsAndRarityScore(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    portalAavegotchiTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PortalAavegotchiTraitsIOStructOutput[]] & {
        portalAavegotchiTraits_: PortalAavegotchiTraitsIOStructOutput[];
      }
    >;

    "portalAavegotchiTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PortalAavegotchiTraitsIOStructOutput[]] & {
        portalAavegotchiTraits_: PortalAavegotchiTraitsIOStructOutput[];
      }
    >;

    rarityMultiplier(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier_: BigNumber }>;

    "rarityMultiplier(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier_: BigNumber }>;

    realmInteract(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmInteract(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revenueShares(
      overrides?: CallOverrides
    ): Promise<[AavegotchiGameFacet.RevenueSharesIOStructOutput]>;

    "revenueShares()"(
      overrides?: CallOverrides
    ): Promise<[AavegotchiGameFacet.RevenueSharesIOStructOutput]>;

    setAavegotchiName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAavegotchiName(uint256,string)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealmAddress(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRealmAddress(address)"(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "spendSkillPoints(uint256,int16[4])"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenIdsWithKinship(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]] & {
        tokenIdsWithKinship_: AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[];
      }
    >;

    "tokenIdsWithKinship(address,uint256,uint256,bool)"(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]] & {
        tokenIdsWithKinship_: AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[];
      }
    >;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredXp_: BigNumber }>;

    "xpUntilNextLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredXp_: BigNumber }>;
  };

  aavegotchiLevel(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "aavegotchiLevel(uint256)"(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  aavegotchiNameAvailable(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "aavegotchiNameAvailable(string)"(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  availableSkillPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "availableSkillPoints(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseRarityScore(
    _numericTraits: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "baseRarityScore(int16[6])"(
    _numericTraits: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAavegotchi(
    _tokenId: PromiseOrValue<BigNumberish>,
    _option: PromiseOrValue<BigNumberish>,
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimAavegotchi(uint256,uint256,uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    _option: PromiseOrValue<BigNumberish>,
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentHaunt(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, HauntStructOutput] & {
      hauntId_: BigNumber;
      haunt_: HauntStructOutput;
    }
  >;

  "currentHaunt()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, HauntStructOutput] & {
      hauntId_: BigNumber;
      haunt_: HauntStructOutput;
    }
  >;

  getNumericTraits(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  "getNumericTraits(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  ghstAddress(overrides?: CallOverrides): Promise<string>;

  "ghstAddress()"(overrides?: CallOverrides): Promise<string>;

  interact(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "interact(uint256[])"(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kinship(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "kinship(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  modifiedTraitsAndRarityScore(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber] & {
      numericTraits_: number[];
      rarityScore_: BigNumber;
    }
  >;

  "modifiedTraitsAndRarityScore(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber] & {
      numericTraits_: number[];
      rarityScore_: BigNumber;
    }
  >;

  portalAavegotchiTraits(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PortalAavegotchiTraitsIOStructOutput[]>;

  "portalAavegotchiTraits(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PortalAavegotchiTraitsIOStructOutput[]>;

  rarityMultiplier(
    _numericTraits: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rarityMultiplier(int16[6])"(
    _numericTraits: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  realmInteract(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmInteract(uint256)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revenueShares(
    overrides?: CallOverrides
  ): Promise<AavegotchiGameFacet.RevenueSharesIOStructOutput>;

  "revenueShares()"(
    overrides?: CallOverrides
  ): Promise<AavegotchiGameFacet.RevenueSharesIOStructOutput>;

  setAavegotchiName(
    _tokenId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAavegotchiName(uint256,string)"(
    _tokenId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealmAddress(
    _realm: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRealmAddress(address)"(
    _realm: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spendSkillPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    _values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "spendSkillPoints(uint256,int16[4])"(
    _tokenId: PromiseOrValue<BigNumberish>,
    _values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenIdsWithKinship(
    _owner: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    _skip: PromiseOrValue<BigNumberish>,
    all: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]>;

  "tokenIdsWithKinship(address,uint256,uint256,bool)"(
    _owner: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    _skip: PromiseOrValue<BigNumberish>,
    all: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]>;

  xpUntilNextLevel(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "xpUntilNextLevel(uint256)"(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    aavegotchiLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aavegotchiLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aavegotchiNameAvailable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "aavegotchiNameAvailable(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableSkillPoints(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseRarityScore(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseRarityScore(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAavegotchi(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAavegotchi(uint256,uint256,uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentHaunt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, HauntStructOutput] & {
        hauntId_: BigNumber;
        haunt_: HauntStructOutput;
      }
    >;

    "currentHaunt()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, HauntStructOutput] & {
        hauntId_: BigNumber;
        haunt_: HauntStructOutput;
      }
    >;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    "getNumericTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    ghstAddress(overrides?: CallOverrides): Promise<string>;

    "ghstAddress()"(overrides?: CallOverrides): Promise<string>;

    interact(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "interact(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    kinship(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "kinship(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    "modifiedTraitsAndRarityScore(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    portalAavegotchiTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PortalAavegotchiTraitsIOStructOutput[]>;

    "portalAavegotchiTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PortalAavegotchiTraitsIOStructOutput[]>;

    rarityMultiplier(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rarityMultiplier(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmInteract(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "realmInteract(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revenueShares(
      overrides?: CallOverrides
    ): Promise<AavegotchiGameFacet.RevenueSharesIOStructOutput>;

    "revenueShares()"(
      overrides?: CallOverrides
    ): Promise<AavegotchiGameFacet.RevenueSharesIOStructOutput>;

    setAavegotchiName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAavegotchiName(uint256,string)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRealmAddress(
      _realm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRealmAddress(address)"(
      _realm: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "spendSkillPoints(uint256,int16[4])"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIdsWithKinship(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]>;

    "tokenIdsWithKinship(address,uint256,uint256,bool)"(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<AavegotchiGameFacet.TokenIdsWithKinshipStructOutput[]>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xpUntilNextLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClaimAavegotchi(uint256)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimAavegotchiEventFilter;
    ClaimAavegotchi(
      _tokenId?: PromiseOrValue<BigNumberish> | null
    ): ClaimAavegotchiEventFilter;

    "LockAavegotchi(uint256,uint256)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _time?: null
    ): LockAavegotchiEventFilter;
    LockAavegotchi(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _time?: null
    ): LockAavegotchiEventFilter;

    "SetAavegotchiName(uint256,string,string)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldName?: null,
      _newName?: null
    ): SetAavegotchiNameEventFilter;
    SetAavegotchiName(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldName?: null,
      _newName?: null
    ): SetAavegotchiNameEventFilter;

    "SetBatchId(uint256,uint256[])"(
      _batchId?: PromiseOrValue<BigNumberish> | null,
      tokenIds?: null
    ): SetBatchIdEventFilter;
    SetBatchId(
      _batchId?: PromiseOrValue<BigNumberish> | null,
      tokenIds?: null
    ): SetBatchIdEventFilter;

    "SpendSkillpoints(uint256,int16[4])"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _values?: null
    ): SpendSkillpointsEventFilter;
    SpendSkillpoints(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _values?: null
    ): SpendSkillpointsEventFilter;

    "UnLockAavegotchi(uint256,uint256)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _time?: null
    ): UnLockAavegotchiEventFilter;
    UnLockAavegotchi(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _time?: null
    ): UnLockAavegotchiEventFilter;
  };

  estimateGas: {
    aavegotchiLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aavegotchiLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aavegotchiNameAvailable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aavegotchiNameAvailable(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableSkillPoints(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseRarityScore(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseRarityScore(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAavegotchi(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimAavegotchi(uint256,uint256,uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentHaunt(overrides?: CallOverrides): Promise<BigNumber>;

    "currentHaunt()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumericTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ghstAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ghstAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    interact(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "interact(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kinship(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "kinship(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modifiedTraitsAndRarityScore(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    portalAavegotchiTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "portalAavegotchiTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityMultiplier(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rarityMultiplier(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmInteract(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmInteract(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revenueShares(overrides?: CallOverrides): Promise<BigNumber>;

    "revenueShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAavegotchiName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAavegotchiName(uint256,string)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealmAddress(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRealmAddress(address)"(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "spendSkillPoints(uint256,int16[4])"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenIdsWithKinship(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdsWithKinship(address,uint256,uint256,bool)"(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xpUntilNextLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aavegotchiLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aavegotchiLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aavegotchiNameAvailable(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aavegotchiNameAvailable(string)"(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableSkillPoints(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseRarityScore(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseRarityScore(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAavegotchi(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimAavegotchi(uint256,uint256,uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _option: PromiseOrValue<BigNumberish>,
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentHaunt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentHaunt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumericTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ghstAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ghstAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interact(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "interact(uint256[])"(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kinship(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "kinship(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "modifiedTraitsAndRarityScore(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    portalAavegotchiTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "portalAavegotchiTraits(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityMultiplier(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rarityMultiplier(int16[6])"(
      _numericTraits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmInteract(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmInteract(uint256)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revenueShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "revenueShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAavegotchiName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAavegotchiName(uint256,string)"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealmAddress(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRealmAddress(address)"(
      _realm: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "spendSkillPoints(uint256,int16[4])"(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdsWithKinship(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdsWithKinship(address,uint256,uint256,bool)"(
      _owner: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      _skip: PromiseOrValue<BigNumberish>,
      all: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xpUntilNextLevel(uint256)"(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
