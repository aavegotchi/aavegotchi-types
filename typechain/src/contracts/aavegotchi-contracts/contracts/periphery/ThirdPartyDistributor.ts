/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace ThirdPartyDistributor {
  export type DistributionStruct = {
    beneficiary: PromiseOrValue<string>;
    proportion: PromiseOrValue<BigNumberish>;
  };

  export type DistributionStructOutput = [string, number] & {
    beneficiary: string;
    proportion: number;
  };

  export type ReleaseParamsStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ReleaseParamsStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface ThirdPartyDistributorInterface extends utils.Interface {
  functions: {
    "beneficiaryDistribution(address)": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "isBeneficiary(address)": FunctionFragment;
    "numBeneficiaries()": FunctionFragment;
    "owner()": FunctionFragment;
    "partialReleaseToken(address,uint256)": FunctionFragment;
    "partialReleaseTokens((address,uint256)[])": FunctionFragment;
    "releaseAccess()": FunctionFragment;
    "releaseToken(address)": FunctionFragment;
    "releaseTokens(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDistribution((address,uint32)[])": FunctionFragment;
    "updateReleaseAccess(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beneficiaryDistribution"
      | "beneficiaryDistribution(address)"
      | "distributions"
      | "distributions(uint256)"
      | "isBeneficiary"
      | "isBeneficiary(address)"
      | "numBeneficiaries"
      | "numBeneficiaries()"
      | "owner"
      | "owner()"
      | "partialReleaseToken"
      | "partialReleaseToken(address,uint256)"
      | "partialReleaseTokens"
      | "partialReleaseTokens((address,uint256)[])"
      | "releaseAccess"
      | "releaseAccess()"
      | "releaseToken"
      | "releaseToken(address)"
      | "releaseTokens"
      | "releaseTokens(address[])"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "updateDistribution"
      | "updateDistribution((address,uint32)[])"
      | "updateReleaseAccess"
      | "updateReleaseAccess(uint8)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beneficiaryDistribution",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryDistribution(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBeneficiary(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numBeneficiaries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numBeneficiaries()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialReleaseToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partialReleaseToken(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partialReleaseTokens",
    values: [ThirdPartyDistributor.ReleaseParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "partialReleaseTokens((address,uint256)[])",
    values: [ThirdPartyDistributor.ReleaseParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAccess()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokens",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokens(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistribution",
    values: [ThirdPartyDistributor.DistributionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistribution((address,uint32)[])",
    values: [ThirdPartyDistributor.DistributionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReleaseAccess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReleaseAccess(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiaryDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryDistribution(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeneficiary(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numBeneficiaries()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialReleaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialReleaseToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialReleaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialReleaseTokens((address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseAccess()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokens(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistribution((address,uint32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReleaseAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReleaseAccess(uint8)",
    data: BytesLike
  ): Result;

  events: {
    "DistributionsUpdated()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensReleased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionsUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReleased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokensReleased(address,uint256)"
  ): EventFragment;
}

export interface DistributionsUpdatedEventObject {}
export type DistributionsUpdatedEvent = TypedEvent<
  [],
  DistributionsUpdatedEventObject
>;

export type DistributionsUpdatedEventFilter =
  TypedEventFilter<DistributionsUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokensReleasedEventObject {
  token: string;
  amount: BigNumber;
}
export type TokensReleasedEvent = TypedEvent<
  [string, BigNumber],
  TokensReleasedEventObject
>;

export type TokensReleasedEventFilter = TypedEventFilter<TokensReleasedEvent>;

export interface ThirdPartyDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThirdPartyDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beneficiaryDistribution(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ThirdPartyDistributor.DistributionStructOutput] & {
        distribution: ThirdPartyDistributor.DistributionStructOutput;
      }
    >;

    "beneficiaryDistribution(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ThirdPartyDistributor.DistributionStructOutput] & {
        distribution: ThirdPartyDistributor.DistributionStructOutput;
      }
    >;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

    "distributions(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

    isBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBeneficiary(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numBeneficiaries(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numBeneficiaries()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    partialReleaseToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "partialReleaseToken(address,uint256)"(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partialReleaseTokens(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "partialReleaseTokens((address,uint256)[])"(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseAccess(overrides?: CallOverrides): Promise<[number]>;

    "releaseAccess()"(overrides?: CallOverrides): Promise<[number]>;

    releaseToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "releaseToken(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "releaseTokens(address[])"(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDistribution(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateDistribution((address,uint32)[])"(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReleaseAccess(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateReleaseAccess(uint8)"(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  beneficiaryDistribution(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ThirdPartyDistributor.DistributionStructOutput>;

  "beneficiaryDistribution(address)"(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ThirdPartyDistributor.DistributionStructOutput>;

  distributions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

  "distributions(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

  isBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBeneficiary(address)"(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numBeneficiaries(overrides?: CallOverrides): Promise<BigNumber>;

  "numBeneficiaries()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  partialReleaseToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "partialReleaseToken(address,uint256)"(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partialReleaseTokens(
    _params: ThirdPartyDistributor.ReleaseParamsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "partialReleaseTokens((address,uint256)[])"(
    _params: ThirdPartyDistributor.ReleaseParamsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseAccess(overrides?: CallOverrides): Promise<number>;

  "releaseAccess()"(overrides?: CallOverrides): Promise<number>;

  releaseToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "releaseToken(address)"(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseTokens(
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "releaseTokens(address[])"(
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDistribution(
    _distributions: ThirdPartyDistributor.DistributionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateDistribution((address,uint32)[])"(
    _distributions: ThirdPartyDistributor.DistributionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReleaseAccess(
    _releaseAccess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateReleaseAccess(uint8)"(
    _releaseAccess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beneficiaryDistribution(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ThirdPartyDistributor.DistributionStructOutput>;

    "beneficiaryDistribution(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ThirdPartyDistributor.DistributionStructOutput>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

    "distributions(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { beneficiary: string; proportion: number }>;

    isBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBeneficiary(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numBeneficiaries(overrides?: CallOverrides): Promise<BigNumber>;

    "numBeneficiaries()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    partialReleaseToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "partialReleaseToken(address,uint256)"(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    partialReleaseTokens(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "partialReleaseTokens((address,uint256)[])"(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    releaseAccess(overrides?: CallOverrides): Promise<number>;

    "releaseAccess()"(overrides?: CallOverrides): Promise<number>;

    releaseToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "releaseToken(address)"(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "releaseTokens(address[])"(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDistribution(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDistribution((address,uint32)[])"(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateReleaseAccess(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReleaseAccess(uint8)"(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DistributionsUpdated()"(): DistributionsUpdatedEventFilter;
    DistributionsUpdated(): DistributionsUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokensReleased(address,uint256)"(
      token?: null,
      amount?: null
    ): TokensReleasedEventFilter;
    TokensReleased(token?: null, amount?: null): TokensReleasedEventFilter;
  };

  estimateGas: {
    beneficiaryDistribution(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beneficiaryDistribution(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributions(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBeneficiary(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numBeneficiaries(overrides?: CallOverrides): Promise<BigNumber>;

    "numBeneficiaries()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    partialReleaseToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "partialReleaseToken(address,uint256)"(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partialReleaseTokens(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "partialReleaseTokens((address,uint256)[])"(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseAccess(overrides?: CallOverrides): Promise<BigNumber>;

    "releaseAccess()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "releaseToken(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "releaseTokens(address[])"(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDistribution(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateDistribution((address,uint32)[])"(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReleaseAccess(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateReleaseAccess(uint8)"(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiaryDistribution(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beneficiaryDistribution(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributions(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBeneficiary(address)"(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numBeneficiaries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numBeneficiaries()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialReleaseToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "partialReleaseToken(address,uint256)"(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partialReleaseTokens(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "partialReleaseTokens((address,uint256)[])"(
      _params: ThirdPartyDistributor.ReleaseParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseAccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "releaseAccess()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "releaseToken(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "releaseTokens(address[])"(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDistribution(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateDistribution((address,uint32)[])"(
      _distributions: ThirdPartyDistributor.DistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReleaseAccess(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateReleaseAccess(uint8)"(
      _releaseAccess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
