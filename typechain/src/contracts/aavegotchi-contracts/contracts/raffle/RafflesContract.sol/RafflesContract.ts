/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace RafflesContract {
  export type RaffleItemPrizeIOStruct = {
    prizeAddress: PromiseOrValue<string>;
    prizeId: PromiseOrValue<BigNumberish>;
    prizeQuantity: PromiseOrValue<BigNumberish>;
  };

  export type RaffleItemPrizeIOStructOutput = [string, BigNumber, BigNumber] & {
    prizeAddress: string;
    prizeId: BigNumber;
    prizeQuantity: BigNumber;
  };

  export type RaffleItemInputStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    raffleItemPrizes: RafflesContract.RaffleItemPrizeIOStruct[];
  };

  export type RaffleItemInputStructOutput = [
    string,
    BigNumber,
    RafflesContract.RaffleItemPrizeIOStructOutput[]
  ] & {
    ticketAddress: string;
    ticketId: BigNumber;
    raffleItemPrizes: RafflesContract.RaffleItemPrizeIOStructOutput[];
  };

  export type TicketItemIOStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    ticketQuantity: PromiseOrValue<BigNumberish>;
  };

  export type TicketItemIOStructOutput = [string, BigNumber, BigNumber] & {
    ticketAddress: string;
    ticketId: BigNumber;
    ticketQuantity: BigNumber;
  };

  export type PrizesWinIOStruct = {
    raffleItemPrizeIndex: PromiseOrValue<BigNumberish>;
    winningPrizeNumbers: PromiseOrValue<BigNumberish>[];
  };

  export type PrizesWinIOStructOutput = [BigNumber, BigNumber[]] & {
    raffleItemPrizeIndex: BigNumber;
    winningPrizeNumbers: BigNumber[];
  };

  export type TicketWinIOStruct = {
    entryIndex: PromiseOrValue<BigNumberish>;
    prizes: RafflesContract.PrizesWinIOStruct[];
  };

  export type TicketWinIOStructOutput = [
    BigNumber,
    RafflesContract.PrizesWinIOStructOutput[]
  ] & {
    entryIndex: BigNumber;
    prizes: RafflesContract.PrizesWinIOStructOutput[];
  };

  export type EntryIOStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    ticketQuantity: PromiseOrValue<BigNumberish>;
    rangeStart: PromiseOrValue<BigNumberish>;
    rangeEnd: PromiseOrValue<BigNumberish>;
    raffleItemIndex: PromiseOrValue<BigNumberish>;
    prizesClaimed: PromiseOrValue<boolean>;
  };

  export type EntryIOStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    ticketAddress: string;
    ticketId: BigNumber;
    ticketQuantity: BigNumber;
    rangeStart: BigNumber;
    rangeEnd: BigNumber;
    raffleItemIndex: BigNumber;
    prizesClaimed: boolean;
  };

  export type RaffleIOStruct = {
    raffleId: PromiseOrValue<BigNumberish>;
    raffleEnd: PromiseOrValue<BigNumberish>;
    isOpen: PromiseOrValue<boolean>;
  };

  export type RaffleIOStructOutput = [BigNumber, BigNumber, boolean] & {
    raffleId: BigNumber;
    raffleEnd: BigNumber;
    isOpen: boolean;
  };

  export type RaffleItemOutputStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    totalEntered: PromiseOrValue<BigNumberish>;
    raffleItemPrizes: RafflesContract.RaffleItemPrizeIOStruct[];
  };

  export type RaffleItemOutputStructOutput = [
    string,
    BigNumber,
    BigNumber,
    RafflesContract.RaffleItemPrizeIOStructOutput[]
  ] & {
    ticketAddress: string;
    ticketId: BigNumber;
    totalEntered: BigNumber;
    raffleItemPrizes: RafflesContract.RaffleItemPrizeIOStructOutput[];
  };

  export type TicketStatsIOStruct = {
    ticketAddress: PromiseOrValue<string>;
    ticketId: PromiseOrValue<BigNumberish>;
    numberOfEntrants: PromiseOrValue<BigNumberish>;
    totalEntered: PromiseOrValue<BigNumberish>;
  };

  export type TicketStatsIOStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    ticketAddress: string;
    ticketId: BigNumber;
    numberOfEntrants: BigNumber;
    totalEntered: BigNumber;
  };
}

export interface RafflesContractInterface extends utils.Interface {
  functions: {
    "changeVRF(uint256,bytes32,address,address)": FunctionFragment;
    "changeVRFFee(uint256,bytes32)": FunctionFragment;
    "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])": FunctionFragment;
    "drawRandomNumber(uint256)": FunctionFragment;
    "drawRandomNumberTest(uint256)": FunctionFragment;
    "enterTickets(uint256,(address,uint256,uint256)[])": FunctionFragment;
    "getEntrants(uint256)": FunctionFragment;
    "getEntries(uint256,address)": FunctionFragment;
    "getRaffles()": FunctionFragment;
    "linkBalance()": FunctionFragment;
    "nonces(bytes32)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "raffleInfo(uint256)": FunctionFragment;
    "raffleSupply()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "removeLinkTokens(address,uint256)": FunctionFragment;
    "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketStats(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeVRF"
      | "changeVRF(uint256,bytes32,address,address)"
      | "changeVRFFee"
      | "changeVRFFee(uint256,bytes32)"
      | "claimPrize"
      | "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"
      | "drawRandomNumber"
      | "drawRandomNumber(uint256)"
      | "drawRandomNumberTest"
      | "drawRandomNumberTest(uint256)"
      | "enterTickets"
      | "enterTickets(uint256,(address,uint256,uint256)[])"
      | "getEntrants"
      | "getEntrants(uint256)"
      | "getEntries"
      | "getEntries(uint256,address)"
      | "getRaffles"
      | "getRaffles()"
      | "linkBalance"
      | "linkBalance()"
      | "nonces"
      | "nonces(bytes32)"
      | "onERC1155Received"
      | "onERC1155Received(address,address,uint256,uint256,bytes)"
      | "owner"
      | "owner()"
      | "raffleInfo"
      | "raffleInfo(uint256)"
      | "raffleSupply"
      | "raffleSupply()"
      | "rawFulfillRandomness"
      | "rawFulfillRandomness(bytes32,uint256)"
      | "removeLinkTokens"
      | "removeLinkTokens(address,uint256)"
      | "startRaffle"
      | "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "ticketStats"
      | "ticketStats(uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeVRF",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVRF(uint256,bytes32,address,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVRFFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeVRFFee(uint256,bytes32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RafflesContract.TicketWinIOStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      RafflesContract.TicketWinIOStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumber(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumberTest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRandomNumberTest(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterTickets",
    values: [PromiseOrValue<BigNumberish>, RafflesContract.TicketItemIOStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterTickets(uint256,(address,uint256,uint256)[])",
    values: [PromiseOrValue<BigNumberish>, RafflesContract.TicketItemIOStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntrants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntrants(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntries",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntries(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffles()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raffleInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleInfo(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffleSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkTokens(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startRaffle",
    values: [
      PromiseOrValue<BigNumberish>,
      RafflesContract.RaffleItemInputStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])",
    values: [
      PromiseOrValue<BigNumberish>,
      RafflesContract.RaffleItemInputStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketStats",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketStats(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "changeVRF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVRF(uint256,bytes32,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVRFFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVRFFee(uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumber(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumberTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawRandomNumberTest(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterTickets(uint256,(address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntrants(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntries(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRaffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaffles()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raffleInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleInfo(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkTokens(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketStats(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RaffleClaimPrize(uint256,address,address,uint256,uint256)": EventFragment;
    "RaffleRandomNumber(uint256,uint256)": EventFragment;
    "RaffleStarted(uint256,uint256,tuple[])": EventFragment;
    "RaffleTicketsEntered(uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleClaimPrize"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RaffleClaimPrize(uint256,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleRandomNumber"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RaffleRandomNumber(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleStarted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RaffleStarted(uint256,uint256,tuple[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleTicketsEntered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RaffleTicketsEntered(uint256,address,tuple[])"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RaffleClaimPrizeEventObject {
  raffleId: BigNumber;
  entrant: string;
  prizeAddress: string;
  prizeId: BigNumber;
  prizeQuantity: BigNumber;
}
export type RaffleClaimPrizeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  RaffleClaimPrizeEventObject
>;

export type RaffleClaimPrizeEventFilter =
  TypedEventFilter<RaffleClaimPrizeEvent>;

export interface RaffleRandomNumberEventObject {
  raffleId: BigNumber;
  randomNumber: BigNumber;
}
export type RaffleRandomNumberEvent = TypedEvent<
  [BigNumber, BigNumber],
  RaffleRandomNumberEventObject
>;

export type RaffleRandomNumberEventFilter =
  TypedEventFilter<RaffleRandomNumberEvent>;

export interface RaffleStartedEventObject {
  raffleId: BigNumber;
  raffleEnd: BigNumber;
  raffleItems: RafflesContract.RaffleItemInputStructOutput[];
}
export type RaffleStartedEvent = TypedEvent<
  [BigNumber, BigNumber, RafflesContract.RaffleItemInputStructOutput[]],
  RaffleStartedEventObject
>;

export type RaffleStartedEventFilter = TypedEventFilter<RaffleStartedEvent>;

export interface RaffleTicketsEnteredEventObject {
  raffleId: BigNumber;
  entrant: string;
  ticketItems: RafflesContract.TicketItemIOStructOutput[];
}
export type RaffleTicketsEnteredEvent = TypedEvent<
  [BigNumber, string, RafflesContract.TicketItemIOStructOutput[]],
  RaffleTicketsEnteredEventObject
>;

export type RaffleTicketsEnteredEventFilter =
  TypedEventFilter<RaffleTicketsEnteredEvent>;

export interface RafflesContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RafflesContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeVRF(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeVRF(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeVRFFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeVRFFee(uint256,bytes32)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPrize(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawRandomNumber(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "drawRandomNumber(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawRandomNumberTest(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "drawRandomNumberTest(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterTickets(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enterTickets(uint256,(address,uint256,uint256)[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEntrants(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { entrants_: string[] }>;

    "getEntrants(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { entrants_: string[] }>;

    getEntries(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.EntryIOStructOutput[]] & {
        entries_: RafflesContract.EntryIOStructOutput[];
      }
    >;

    "getEntries(uint256,address)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.EntryIOStructOutput[]] & {
        entries_: RafflesContract.EntryIOStructOutput[];
      }
    >;

    getRaffles(
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.RaffleIOStructOutput[]] & {
        raffles_: RafflesContract.RaffleIOStructOutput[];
      }
    >;

    "getRaffles()"(
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.RaffleIOStructOutput[]] & {
        raffles_: RafflesContract.RaffleIOStructOutput[];
      }
    >;

    linkBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    "linkBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkBalance_: BigNumber }>;

    nonces(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce_: BigNumber }>;

    "nonces(bytes32)"(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce_: BigNumber }>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    raffleInfo(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
        raffleEnd_: BigNumber;
        raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
        randomNumber_: BigNumber;
      }
    >;

    "raffleInfo(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
        raffleEnd_: BigNumber;
        raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
        randomNumber_: BigNumber;
      }
    >;

    raffleSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { raffleSupply_: BigNumber }>;

    "raffleSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { raffleSupply_: BigNumber }>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRaffle(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketStats(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.TicketStatsIOStructOutput[]] & {
        ticketStats_: RafflesContract.TicketStatsIOStructOutput[];
      }
    >;

    "ticketStats(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [RafflesContract.TicketStatsIOStructOutput[]] & {
        ticketStats_: RafflesContract.TicketStatsIOStructOutput[];
      }
    >;

    transferOwnership(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeVRF(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeVRF(uint256,bytes32,address,address)"(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeVRFFee(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeVRFFee(uint256,bytes32)"(
    _newFee: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPrize(
    _raffleId: PromiseOrValue<BigNumberish>,
    _entrant: PromiseOrValue<string>,
    _wins: RafflesContract.TicketWinIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"(
    _raffleId: PromiseOrValue<BigNumberish>,
    _entrant: PromiseOrValue<string>,
    _wins: RafflesContract.TicketWinIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawRandomNumber(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "drawRandomNumber(uint256)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawRandomNumberTest(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "drawRandomNumberTest(uint256)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterTickets(
    _raffleId: PromiseOrValue<BigNumberish>,
    _ticketItems: RafflesContract.TicketItemIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enterTickets(uint256,(address,uint256,uint256)[])"(
    _raffleId: PromiseOrValue<BigNumberish>,
    _ticketItems: RafflesContract.TicketItemIOStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEntrants(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getEntrants(uint256)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEntries(
    _raffleId: PromiseOrValue<BigNumberish>,
    _entrant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RafflesContract.EntryIOStructOutput[]>;

  "getEntries(uint256,address)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    _entrant: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RafflesContract.EntryIOStructOutput[]>;

  getRaffles(
    overrides?: CallOverrides
  ): Promise<RafflesContract.RaffleIOStructOutput[]>;

  "getRaffles()"(
    overrides?: CallOverrides
  ): Promise<RafflesContract.RaffleIOStructOutput[]>;

  linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(bytes32)"(
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155Received(
    _operator: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    _operator: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  raffleInfo(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
      raffleEnd_: BigNumber;
      raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
      randomNumber_: BigNumber;
    }
  >;

  "raffleInfo(uint256)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
      raffleEnd_: BigNumber;
      raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
      randomNumber_: BigNumber;
    }
  >;

  raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "raffleSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    _requestId: PromiseOrValue<BytesLike>,
    _randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rawFulfillRandomness(bytes32,uint256)"(
    _requestId: PromiseOrValue<BytesLike>,
    _randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLinkTokens(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeLinkTokens(address,uint256)"(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRaffle(
    _raffleDuration: PromiseOrValue<BigNumberish>,
    _raffleItems: RafflesContract.RaffleItemInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"(
    _raffleDuration: PromiseOrValue<BigNumberish>,
    _raffleItems: RafflesContract.RaffleItemInputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketStats(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RafflesContract.TicketStatsIOStructOutput[]>;

  "ticketStats(uint256)"(
    _raffleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RafflesContract.TicketStatsIOStructOutput[]>;

  transferOwnership(
    _newContractOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newContractOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeVRF(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeVRF(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeVRFFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeVRFFee(uint256,bytes32)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPrize(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    drawRandomNumber(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "drawRandomNumber(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    drawRandomNumberTest(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "drawRandomNumberTest(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterTickets(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "enterTickets(uint256,(address,uint256,uint256)[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEntrants(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getEntrants(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEntries(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RafflesContract.EntryIOStructOutput[]>;

    "getEntries(uint256,address)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RafflesContract.EntryIOStructOutput[]>;

    getRaffles(
      overrides?: CallOverrides
    ): Promise<RafflesContract.RaffleIOStructOutput[]>;

    "getRaffles()"(
      overrides?: CallOverrides
    ): Promise<RafflesContract.RaffleIOStructOutput[]>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(bytes32)"(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    raffleInfo(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
        raffleEnd_: BigNumber;
        raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
        randomNumber_: BigNumber;
      }
    >;

    "raffleInfo(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, RafflesContract.RaffleItemOutputStructOutput[], BigNumber] & {
        raffleEnd_: BigNumber;
        raffleItems_: RafflesContract.RaffleItemOutputStructOutput[];
        randomNumber_: BigNumber;
      }
    >;

    raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "raffleSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startRaffle(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketStats(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RafflesContract.TicketStatsIOStructOutput[]>;

    "ticketStats(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RafflesContract.TicketStatsIOStructOutput[]>;

    transferOwnership(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RaffleClaimPrize(uint256,address,address,uint256,uint256)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      entrant?: null,
      prizeAddress?: null,
      prizeId?: null,
      prizeQuantity?: null
    ): RaffleClaimPrizeEventFilter;
    RaffleClaimPrize(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      entrant?: null,
      prizeAddress?: null,
      prizeId?: null,
      prizeQuantity?: null
    ): RaffleClaimPrizeEventFilter;

    "RaffleRandomNumber(uint256,uint256)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null
    ): RaffleRandomNumberEventFilter;
    RaffleRandomNumber(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null
    ): RaffleRandomNumberEventFilter;

    "RaffleStarted(uint256,uint256,tuple[])"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      raffleEnd?: null,
      raffleItems?: null
    ): RaffleStartedEventFilter;
    RaffleStarted(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      raffleEnd?: null,
      raffleItems?: null
    ): RaffleStartedEventFilter;

    "RaffleTicketsEntered(uint256,address,tuple[])"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      entrant?: null,
      ticketItems?: null
    ): RaffleTicketsEnteredEventFilter;
    RaffleTicketsEntered(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      entrant?: null,
      ticketItems?: null
    ): RaffleTicketsEnteredEventFilter;
  };

  estimateGas: {
    changeVRF(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeVRF(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeVRFFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeVRFFee(uint256,bytes32)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPrize(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawRandomNumber(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "drawRandomNumber(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawRandomNumberTest(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "drawRandomNumberTest(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterTickets(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enterTickets(uint256,(address,uint256,uint256)[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEntrants(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntrants(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntries(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEntries(uint256,address)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffles(overrides?: CallOverrides): Promise<BigNumber>;

    "getRaffles()"(overrides?: CallOverrides): Promise<BigNumber>;

    linkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "linkBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(bytes32)"(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    raffleInfo(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "raffleInfo(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "raffleSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRaffle(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketStats(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ticketStats(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeVRF(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeVRF(uint256,bytes32,address,address)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _vrfCoordinator: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeVRFFee(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeVRFFee(uint256,bytes32)"(
      _newFee: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPrize(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimPrize(uint256,address,(uint256,(uint256,uint256[])[])[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      _wins: RafflesContract.TicketWinIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawRandomNumber(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "drawRandomNumber(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawRandomNumberTest(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "drawRandomNumberTest(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterTickets(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enterTickets(uint256,(address,uint256,uint256)[])"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _ticketItems: RafflesContract.TicketItemIOStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEntrants(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntrants(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntries(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntries(uint256,address)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      _entrant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaffles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRaffles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "linkBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(bytes32)"(
      _keyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      _operator: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raffleInfo(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "raffleInfo(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "raffleSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      _requestId: PromiseOrValue<BytesLike>,
      _randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLinkTokens(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeLinkTokens(address,uint256)"(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRaffle(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startRaffle(uint256,(address,uint256,(address,uint256,uint256)[])[])"(
      _raffleDuration: PromiseOrValue<BigNumberish>,
      _raffleItems: RafflesContract.RaffleItemInputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketStats(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticketStats(uint256)"(
      _raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newContractOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
